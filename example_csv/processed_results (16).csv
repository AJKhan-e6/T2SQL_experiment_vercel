UNQ_ALIAS,Original_Query,list_of_tables
1299241,"-- RS45,
select CASE
         WHEN T1.""payments data source id"" IS NOT NULL THEN
         T1.""payments data source id""
         ELSE T2.""refunds data source id""
       END as c1,
       Greatest(T1.""gross cashflow"", 0) - Greatest(T2.""refund amount"", 0)
       ""Net Value""
FROM   (SELECT T1.""data_source_id"" ""Payments Data Source Id"",
               SUM (CASE
                      WHEN T1.""status"" IN( 'SUCCESS' ) THEN T1.""amount""
                    END)           ""Gross Cashflow""
        FROM   payments T1
        WHERE  ( T1.data_source_id = 794 )
               AND ( T1.""currency_code"" IS NOT NULL )
        GROUP  BY T1.""data_source_id""
        ORDER  BY T1.""data_source_id"" ASC) T1
       full outer join (SELECT T1.""data_source_id"" ""Refunds Data Source Id"",
                               SUM (CASE
                                      WHEN T1.""status"" IN( 'SUCCESS' ) THEN
                                      T1.""amount""
                                    END)           ""Refund Amount""
                        FROM   refunds T1
                        WHERE  ( T1.data_source_id = 794 )
                               AND ( T1.""currency_code"" IS NOT NULL )
                        GROUP  BY T1.""data_source_id""
                        ORDER  BY T1.""data_source_id"" ASC) T2
                    ON Coalesce(cast(T1.""payments data source id"" as varchar), '') =
                       Coalesce(cast(T2.""refunds data source id"" as varchar), '')
ORDER  BY c1 ASC","['refunds', 'payments']"
1373120,"with monthly_subscription_histories_part as
  (select T1.*,
          case
              when prev_status = 'PAUSED' then case
                                                   when status = 'CANCELLED' then case
                                                                                      when history_rule = 1000 then 'CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE'
                                                                                      else 'CANCEL_FROM_PAUSE'
                                                                                  end
                                               end
              else case
                       when status = 'CANCELLED'
                            and prev_status != 'CANCELLED' then case
                                                                    when prev_status = 'TRIAL' then case
                                                                                                        when history_rule = 1000 then 'CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE'
                                                                                                        else 'CANCEL_FROM_TRIAL'
                                                                                                    end
                                                                    when prev_mrr is null then case
                                                                                                   when history_rule = 1000 then 'CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE'
                                                                                                   else 'CANCEL_FROM_UNKNOWN'
                                                                                               end
                                                                    when prev_mrr = 0 then case
                                                                                               when history_rule = 1000 then 'CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE'
                                                                                               else 'CANCEL_FROM_FREE'
                                                                                           end
                                                                    else case
                                                                             when history_rule = 1000 then 'CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE'
                                                                             else 'CANCEL_FROM_PAID'
                                                                         end
                                                                end
                   end
          end as mrr_sub_status,
          case
              when prev_mrr is not null then abs(mrr - prev_mrr)
              else mrr
          end as mrr_diff
   from
     (select histories.data_source_id,
             histories.business_entity_id,
             histories.subscription_id,
             histories.currency_code,
             histories.status,
             histories.period_start,
             histories.period_end,
             histories.history_rule,
             calendars.cal_date as cal_date,
             calendars.exchange_rate,
             histories.mrr as mrr,
             lag(histories.mrr) over (partition by histories.subscription_id,
                                                   histories.data_source_id
                                      order by calendars.cal_date,
                                               histories.business_entity_id,
                                               histories.subscription_id,
                                               histories.status,
                                               histories.history_rule) as prev_mrr,
                                     lag(histories.status) over (partition by histories.subscription_id,
                                                                              histories.data_source_id
                                                                 order by calendars.cal_date,
                                                                          histories.business_entity_id,
                                                                          histories.subscription_id,
                                                                          histories.status,
                                                                          histories.history_rule) as prev_status,
                                                                lag(histories.subscription_id) over (partition by histories.subscription_id,
                                                                                                                  histories.data_source_id
                                                                                                     order by calendars.cal_date,
                                                                                                              histories.business_entity_id,
                                                                                                              histories.subscription_id,
                                                                                                              histories.status,
                                                                                                              histories.history_rule) as prev_subscription_id,
                                                                                                    histories.cancel_reason
      from (
              (select subscription_histories_part.data_source_id,
                      subscription_histories_part.business_entity_id,
                      subscription_histories_part.subscription_id,
                      subscription_histories_part.currency_code,
                      subscription_histories_part.status,
                      subscription_histories_part.history_rule,
                      period_start,
                      period_end,
                      subscription_histories_part.mrr + GREATEST(subscription_histories_part.non_recurring_mrr, 0) as mrr,
                      case
                          when (datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) < '2022-12-01 00:00:00' then '2022-12-30 23:59:59'
                          else (date_trunc('month', datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) + interval '1' month)
                      end as cal_date,
                      subscription_histories_part.cancel_reason
               from subscription_histories_part
               where subscription_histories_part.is_cmrr = false
                 and subscription_histories_part.data_source_id = 750
                 and subscription_histories_part.period_end >= '2022-11-01 07:59:59'
                 and subscription_histories_part.period_start <= '2023-04-07 07:07:55'
                 and (date_trunc('month', ((datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')))) <> (date_trunc('month', (datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) + interval '1' second))
                      or (datetime(datetime(cast('2022-11-06 23:07:55' as timestamp), 'UTC'), 'America/Los_Angeles')) between subscription_histories_part.period_start and subscription_histories_part.period_end)
                 and subscription_histories_part.currency_code is not null )) histories
      inner join (
                    (select case
                                when date_trunc('month', cal_date) = date_trunc('month', '2022-11-06 23:07:55') then date_trunc('month', '2022-11-06 23:07:55') + interval '1' month
                                else cal_date
                            end as cal_date,
                            date_trunc('month', cal_date) cal_date_1,
                            1.0 as exchange_rate
                     from monthly_calendars
                     where cal_date between '2022-11-01 00:00:00' and '2023-04-30 23:59:59' )) calendars on cast(cast(histories.cal_date as timestamp) as date) = cast(cast(calendars.cal_date as timestamp) as date)) T1),
     monthly_exr_calendars as
  (select t1.cal_date,
          t1.currency_code,
          (t2.exchange_rate / t1.exchange_rate) ""exchange_rate""
   from monthly_exr_calendars t1
   inner join monthly_exr_calendars t2 on t2.currency_code = 'USD'
   and t1.cal_date = t2.cal_date
   where T1.cal_date between '2022-12-01 00:00:00' and '2023-04-30 23:59:59'
   order by t1.cal_date)
select date_trunc('month', monthly_subscription_histories_part.""cal_date"") ""MONTH AND YEAR"",
       sum (case
                when monthly_subscription_histories_part.""mrr_sub_status"" in('CANCEL_FROM_PAID',
                                                                             'CANCEL_FROM_PAUSE') then ((monthly_subscription_histories_part.""mrr_diff"") * monthly_exr_calendars.exchange_rate)
            end) ""CANCEL FROM PAID""
from monthly_subscription_histories_part
inner join monthly_exr_calendars on /* monthly_exr_calendars.""cal_date"" = monthly_subscription_histories_part.""cal_date""
   and */ monthly_exr_calendars.""currency_code"" = monthly_subscription_histories_part.""currency_code""
where (monthly_subscription_histories_part.data_source_id = 750)
  and (monthly_subscription_histories_part.""currency_code"" is not null)
  and (monthly_subscription_histories_part.""mrr_sub_status"" in('CANCEL_FROM_PAID',
                                                               'CANCEL_FROM_PAUSE'))
  and (case
           when monthly_subscription_histories_part.""status"" = 'CANCELLED' then case
                                                                                    when monthly_subscription_histories_part.""cancel_reason"" in('line-bPt40',
                                                                                                                                                'line-HKr71',
                                                                                                                                                'line-LRh52',
                                                                                                                                                'line-nbl28',
                                                                                                                                                'line-SeR94') then 'Involuntary'
                                                                                    else 'Voluntary'
                                                                                end
           else null
       end = 'Involuntary')
  and date_trunc('month', monthly_subscription_histories_part.""cal_date"") between '2022-11-01 00:00:00' and '2023-04-30 23:59:59'
  and date_trunc('month', monthly_subscription_histories_part.""cal_date"") >= '2018-12-01 00:00:00'
group by 1
order by 1 asc","['subscription_histories_part', 'monthly_calendars']"
1299243,"-- RS47,
select T1.""current_plan_handle"" ""Subscriptions Current Plan Name"",
       Count(T1.""handle"")       ""CB ACTIVE SUBSCRIPTIONS""
FROM   subscriptions T1
WHERE  ( T1.data_source_id = 794 )
       AND ( T1.""currency_code"" IS NOT NULL )
       AND ( T1.""status"" = 'ACTIVE' )
GROUP  BY T1.""current_plan_handle"" 
ORDER  BY Count(T1.""handle"")  DESC,
          T1.""current_plan_handle""  ASC",['subscriptions']
1306026,"with daily_exr_calendars as
  (select t1.cal_date,
          t1.currency_code,
          (t2.exchange_rate / t1.exchange_rate) ""exchange_rate""
   from daily_exr_calendars t1
   inner join daily_exr_calendars t2 on t2.currency_code = 'USD'
   and cast(cast(t1.cal_date as timestamp) as date) = cast(cast(t2.cal_date as timestamp) as date)
   where T1.cal_date between '2022-09-01 00:00:00' and '2023-10-31 23:59:59'
   order by t1.cal_date)
select date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) ""MONTH AND YEAR OF INVOICE DATE - INSTA"",
       SUM((floor((T2.""total"")) * floor(daily_exr_calendars.exchange_rate))) ""TOTAL BILLING""
from invoices_part T2
inner join daily_exr_calendars on DATE_TRUNC('day', datetime(datetime(daily_exr_calendars.""cal_date"", 'UTC'), 'America/Los_Angeles')) = DATE_TRUNC('day', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles'))
and daily_exr_calendars.""currency_code"" = T2.""currency_code""
where (T2.data_source_id = 751)
  and (date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) <> date_trunc('month', cast('2023-11-06 22:47:23' as timestamp)))
  and (T2.""status"" in('NOT_PAID',
                      'PAID',
                      'PAYMENT_DUE',
                      'POSTED'))
  and (T2.""currency_code"" is not null)
  and T2.""date"" between '2022-09-01 07:00:00' and '2023-11-01 06:59:59'
  and T2.""date"" >= '2018-12-01 00:00:00'
group by 1
order by 1 asc",['invoices_part']
1363957,"-- LRQ4,
select   Date_trunc('month', t1.""cal_date"") ""MONTH AND YEAR"",
         t1.""prev_product_id"" ""PREVIOUS PRODUCT"",
         t1.""primary_product_handle"" ""Moved To Plan"",
         Count(t1.""primary_product_handle"") ""Plan Count Movement""
FROM     (
                SELECT t1.*,
                       CASE
                              WHEN prev_subscription_id IS NULL THEN
                                     CASE
                                            WHEN mrr > 0 THEN
                                                   CASE
                                                          WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                                                          ELSE 'NEW'
                                                   END
                                            WHEN status = 'CANCELLED' THEN
                                                   CASE
                                                          WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
                                                          ELSE 'CONTRACTION'
                                                   END
                                            WHEN mrr = 0 THEN 'NA'
                                     END
                              WHEN prev_status = 'FUTURE' THEN
                                     CASE
                                            WHEN status IN ('ACTIVE',
                                                            'TRIAL') THEN
                                                   CASE
                                                          WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                                                          ELSE 'NEW'
                                                   END
                                            WHEN status = 'CANCELLED' THEN
                                                   CASE
                                                          WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
                                                          ELSE 'CONTRACTION'
                                                   END
                                            ELSE 'NA'
                                     END
                              WHEN status = 'FUTURE' THEN
                                     CASE
                                            WHEN prev_status = 'FUTURE' THEN 'NA'
                                            WHEN prev_status = 'ACTIVE' THEN
                                                   CASE
                                                          WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
                                                          ELSE 'CONTRACTION'
                                                   END
                                            ELSE 'FUTURE'
                                     END
                              WHEN status = 'PAUSED' THEN
                                     CASE
                                            WHEN prev_status = 'ACTIVE' THEN
                                                   CASE
                                                          WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
                                                          ELSE 'CONTRACTION'
                                                   END
                                            ELSE 'NA'
                                     END
                              WHEN prev_status = 'PAUSED' THEN
                                     CASE
                                            WHEN status = 'ACTIVE' THEN 'EXPANSION'
                                            WHEN status = 'CANCELLED' THEN
                                                   CASE
                                                          WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
                                                          ELSE 'CONTRACTION'
                                                   END
                                            ELSE 'NA'
                                     END
                              ELSE
                                     CASE
                                            WHEN prev_status = status THEN
                                                   CASE
                                                          WHEN status = 'CANCELLED'
                                                          OR     status = 'TRIAL'
                                                          OR     prev_mrr = mrr THEN 'NA'
                                                          WHEN prev_mrr > mrr THEN
                                                                 CASE
                                                                        WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
                                                                        ELSE 'CONTRACTION'
                                                                 END
                                                          ELSE 'EXPANSION'
                                                   END
                                            ELSE
                                                   CASE
                                                          WHEN prev_mrr > mrr THEN
                                                                 CASE
                                                                        WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
                                                                        ELSE 'CONTRACTION'
                                                                 END
                                                          WHEN prev_mrr = mrr THEN 'NA'
                                                          ELSE
                                                                 CASE
                                                                        WHEN prev_status = 'CANCELLED'
                                                                        AND    mrr > 0
                                                                        AND    status = 'ACTIVE' THEN
                                                                               CASE
                                                                                      WHEN Date_trunc('month', activated_at) = Date_trunc('month', period_start) THEN
                                                                                             CASE
                                                                                                    WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                                                                                                    ELSE 'NEW'
                                                                                             END
                                                                                      ELSE 'EXPANSION'
                                                                               END
                                                                        WHEN prev_status = 'TRIAL'
                                                                        AND    mrr > 0
                                                                        AND    status = 'ACTIVE' THEN
                                                                               CASE
                                                                                      WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                                                                                      ELSE 'NEW'
                                                                               END
                                                                 END
                                                   END
                                     END
                       END AS mrr_status,
                       CASE
                              WHEN (
                                            prev_subscription_id IS NULL
                                     AND    status = 'ACTIVE' )
                              OR     (
                                            prev_status = 'TRIAL'
                                     AND    status = 'ACTIVE' ) THEN
                                     CASE
                                            WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                                            ELSE 'NEW'
                                     END
                              WHEN status = 'ACTIVE'
                              AND    prev_status = 'CANCELLED' THEN
                                     CASE
                                            WHEN Date_trunc('month', activated_at) = Date_trunc('month', period_start) THEN
                                                   CASE
                                                          WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                                                          ELSE 'NEW'
                                                   END
                                            ELSE 'REACTIVE'
                                     END
                              WHEN status = 'TRIAL'
                              AND    prev_status = 'ACTIVE' THEN 'ACTIVE_TO_TRIAL'
                              WHEN prev_status = status THEN
                                     CASE
                                            WHEN status = 'ACTIVE'
                                            AND    prev_mrr = 0
                                            AND    mrr > 0 THEN 'FREE_TO_PAID'
                                            WHEN status = 'ACTIVE'
                                            AND    prev_mrr > 0
                                            AND    mrr > prev_mrr THEN 'UPGRADE'
                                            WHEN status = 'ACTIVE'
                                            AND    prev_mrr > 0
                                            AND    mrr < prev_mrr THEN 'DOWNGRADE'
                                     END
                              WHEN prev_status = 'FUTURE' THEN
                                     CASE
                                            WHEN status = 'TRIAL' THEN
                                                   CASE
                                                          WHEN history_rule = 900 THEN 'NEW_TRIAL_FOR_CURRENCY_CHANGE'
                                                          ELSE 'NEW_TRIAL'
                                                   END
                                            WHEN status = 'CANCELLED' THEN
                                                   CASE
                                                          WHEN history_rule = 1000 THEN 'CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE'
                                                          ELSE 'CANCEL_FROM_FUTURE'
                                                   END
                                            WHEN status = 'ACTIVE' THEN
                                                   CASE
                                                          WHEN mrr > 0 THEN
                                                                 CASE
                                                                        WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                                                                        ELSE 'NEW'
                                                                 END
                                                          ELSE
                                                                 CASE
                                                                        WHEN history_rule = 900 THEN 'NEW_FREE_FOR_CURRENCY_CHANGE'
                                                                        ELSE 'NEW_FREE'
                                                                 END
                                                   END
                                            ELSE 'NA'
                                     END
                              WHEN status = 'FUTURE' THEN
                                     CASE
                                            WHEN prev_status = 'FUTURE' THEN 'NA'
                                            WHEN prev_status = 'ACTIVE' THEN
                                                   CASE
                                                          WHEN prev_mrr > 0 THEN 'ACTIVE_TO_FUTURE'
                                                          ELSE 'FREE_TO_FUTURE'
                                                   END
                                            ELSE 'FUTURE'
                                     END
                              WHEN prev_status = 'PAUSED' THEN
                                     CASE
                                            WHEN status = 'FUTURE' THEN 'PAUSE_TO_FUTURE'
                                            WHEN status = 'CANCELLED' THEN
                                                   CASE
                                                          WHEN history_rule = 1000 THEN 'CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE'
                                                          ELSE 'CANCEL_FROM_PAUSE'
                                                   END
                                            WHEN status = 'ACTIVE' THEN
                                                   CASE
                                                          WHEN mrr > 0 THEN 'PAUSE_TO_PAID'
                                                          ELSE 'PAUSE_TO_FREE'
                                                   END
                                            WHEN status = 'TRIAL' THEN 'PAUSE_TO_TRIAL'
                                            ELSE 'NA'
                                     END
                              WHEN status = 'PAUSED' THEN
                                     CASE
                                            WHEN prev_status = 'FUTURE' THEN 'PAUSE_FROM_FUTURE'
                                            WHEN prev_status = 'CANCELLED' THEN 'PAUSE_FROM_CANCEL'
                                            WHEN prev_status = 'TRIAL' THEN 'PAUSE_FROM_TRIAL'
                                            WHEN prev_status = 'ACTIVE' THEN
                                                   CASE
                                                          WHEN prev_mrr > 0 THEN 'PAUSE_FROM_PAID'
                                                          ELSE 'PAUSE_FROM_FREE'
                                                   END
                                            ELSE 'PAUSE_FROM_UNKNOWN'
                                     END
                              ELSE
                                     CASE
                                            WHEN status = 'CANCELLED' THEN
                                                   CASE
                                                          WHEN prev_status = 'TRIAL' THEN
                                                                 CASE
                                                                        WHEN history_rule = 1000 THEN 'CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE'
                                                                        ELSE 'CANCEL_FROM_TRIAL'
                                                                 END
                                                          WHEN prev_mrr IS NULL THEN
                                                                 CASE
                                                                        WHEN history_rule = 1000 THEN 'CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE'
                                                                        ELSE 'CANCEL_FROM_UNKNOWN'
                                                                 END
                                                          WHEN prev_mrr = 0 THEN
                                                                 CASE
                                                                        WHEN history_rule = 1000 THEN 'CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE'
                                                                        ELSE 'CANCEL_FROM_FREE'
                                                                 END
                                                          ELSE
                                                                 CASE
                                                                        WHEN history_rule = 1000 THEN 'CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE'
                                                                        ELSE 'CANCEL_FROM_PAID'
                                                                 END
                                                   END
                                     END
                       END AS mrr_sub_status,
                       CASE
                              WHEN prev_mrr IS NOT NULL THEN Abs(mrr - prev_mrr)
                              ELSE mrr
                       END AS mrr_diff,
                       CASE
                              WHEN prev_mrr IS NOT NULL THEN mrr - prev_mrr
                              ELSE mrr
                       END AS mrr_diff_signed,
                       CASE
                              WHEN prev_mrr > 0 THEN ( ( (mrr - prev_mrr) * 1.0 ) / prev_mrr ) * 100
                       END AS mrr_diff_rate,
                       CASE
                              WHEN prev_mrr IS NULL
                              OR     mrr IS NULL THEN 0
                              WHEN mrr > prev_mrr THEN prev_mrr
                              ELSE mrr
                       END AS mrr_fluctuation
                FROM   (
                                  SELECT     subscriptions.handle          AS subscription_handle,
                                             products.handle               AS primary_product_handle,
                                             subscriptions.customer_handle AS customer_handle,
                                             subscription_histories.id,
                                             subscription_histories.data_source_id,
                                             subscription_histories.currency_code,
                                             subscription_histories.status,
                                             subscription_histories.cancel_reason,
                                             Datetime(Datetime(subscription_histories.period_start, 'UTC'), 'Europe/Amsterdam') AS period_start,
                                             Datetime(Datetime(subscription_histories.period_end, 'UTC'), 'Europe/Amsterdam')   AS period_end,
                                             subscription_histories.is_cmrr,
                                             subscription_histories.history_rule,
                                             subscription_histories.discount,
                                             subscription_histories.subscription_id,
                                             monthly_calendars.cal_date                                                                                                                                                           AS cal_date,
                                             subscription_histories.mrr                                                                                                                                                           AS mrr,
                                             Lag(subscription_histories.mrr) OVER( partition BY subscription_histories.subscription_id, subscription_histories.data_source_id ORDER BY monthly_calendars.cal_date )               AS prev_mrr,
                                             Lag(subscription_histories.status) OVER( partition BY subscription_histories.subscription_id, subscription_histories.data_source_id ORDER BY monthly_calendars.cal_date )            AS prev_status,
                                             Lag( subscription_histories.history_rule ) OVER( partition BY subscription_histories.subscription_id, subscription_histories.data_source_id ORDER BY monthly_calendars.cal_date )    AS prev_history_rule,
                                             Lag( subscription_histories.discount ) OVER( partition BY subscription_histories.subscription_id, subscription_histories.data_source_id ORDER BY monthly_calendars.cal_date )        AS prev_discount,
                                             Lag( subscription_histories.subscription_id ) OVER( partition BY subscription_histories.subscription_id, subscription_histories.data_source_id ORDER BY monthly_calendars.cal_date ) AS prev_subscription_id,
                                             Datetime(Datetime(subscriptions.activated_at, 'UTC'), 'Europe/Amsterdam')                                                                                                            AS activated_at,
                                             products.handle                                                                                                                                                                      AS primary_product_id,
                                             products.product_group                                                                                                                                                               AS primary_product_group,
                                             Lag(products.handle) OVER ( partition BY subscription_histories.subscription_id, subscription_histories.data_source_id ORDER BY monthly_calendars.cal_date )                         AS prev_product_id,
                                             Lag(products.product_group) OVER ( partition BY subscription_histories.subscription_id, subscription_histories.data_source_id ORDER BY monthly_calendars.cal_date )                  AS prev_product_group,
                                             subscription_component_histories.mrr                                                                                                                                                 AS primary_product_mrr,
                                             Lag( subscription_component_histories.mrr ) OVER ( partition BY subscription_histories.subscription_id, subscription_histories.data_source_id ORDER BY monthly_calendars.cal_date )  AS prev_product_mrr
                                  FROM       subscription_histories
                                  INNER JOIN monthly_calendars
                                  ON         Date_trunc( 'seconds', monthly_calendars.cal_date ) BETWEEN Datetime(Datetime(subscription_histories.period_start, 'UTC'), 'Europe/Amsterdam') AND
                                          Datetime(Datetime(subscription_histories.period_end, 'UTC'), 'Europe/Amsterdam')
                                  AND        date_trunc('month', datetime('2020-02-08 16:35:34','Europe/Amsterdam'))> date_trunc('month', monthly_calendars.cal_date)
                                  OR         (
                                                        date_trunc('month', datetime('2020-02-08 16:35:34' , 'Europe/Amsterdam'))= date_trunc('month', monthly_calendars.cal_date)
                                             AND        datetime('2020-02-08 16:35:34','Europe/Amsterdam') BETWEEN datetime(datetime(subscription_histories.period_start, 'UTC'), 'Europe/Amsterdam') AND        datetime(datetime(subscription_histories.period_end, 'UTC'), 'Europe/Amsterdam') )
                                  INNER JOIN subscriptions
                                  ON         subscriptions.id = subscription_histories.subscription_id
                                  AND        subscriptions.data_source_id = subscription_histories.data_source_id
                                  INNER JOIN subscription_component_histories
                                  ON         subscription_histories.id = subscription_component_histories.subscription_history_id
                                  AND        subscription_histories.data_source_id = subscription_component_histories.data_source_id
                                  INNER JOIN products
                                  ON         products.id = subscription_component_histories.product_id
                                  AND        products.product_type = 'PLAN'
                                  AND        products.data_source_id = subscription_component_histories.data_source_id
                                  WHERE      subscription_histories.data_source_id IN(760,
                                                                                      800,
                                                                                      796)
                                  AND        subscriptions.data_source_id IN(760,
                                                                             800,
                                                                             796)
                                  AND        subscription_component_histories.data_source_id IN(760,
                                                                                                800,
                                                                                                796)
                                  AND        products.data_source_id IN(760,
                                                                        800,
                                                                        796)
                                  AND        monthly_calendars.cal_date BETWEEN '2020-02-01 00:00:00' AND        '2020-02-28 23:59:59' ) t1 ) t1
WHERE    (
                  t1.data_source_id IN(760,
                                       800,
                                       796) )
AND      (
                  t1.""prev_product_id"" <> t1.""primary_product_handle"" )
AND      (
                  date_trunc('month', t1.""period_start"") BETWEEN date_trunc('month', datetime('2020-02-08 16:35:34', 'Europe/Amsterdam') - interval '15' day) AND      date_trunc('month', datetime('2020-02-08 16:35:34','Europe/Amsterdam')) )
AND      (
                  t1.""status"" <> 'CANCELLED')
AND      date_trunc('month', t1.""cal_date"") BETWEEN '2019-11-01 00:00:00' AND      '2021-10-31 23:59:59'
GROUP BY date_trunc('month', t1.""cal_date""),
         t1.""prev_product_id"",
         t1.""primary_product_handle""
ORDER BY date_trunc('month', t1.""cal_date"") ASC,
         t1.""prev_product_id"" ASC,
         t1.""primary_product_handle""","['subscription_component_histories', 'monthly_calendars', 'subscriptions', 'products', 'subscription_histories']"
1299244,"-- V1,
select
  cal_date,
  id,
  data_source_id,
  currency_code,
  mrr,
  STATUS,
  cancel_reason,
  period_start,
  period_end,
  discount,
  customer_handle,
  subscription_handle,
  primary_product_handle,
  subscription_id,
  CASE
    WHEN prev_subscription_id IS NULL THEN CASE
      WHEN mrr > 0 THEN CASE
        WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
        ELSE 'NEW'
      END
      WHEN STATUS = 'CANCELLED' THEN CASE
        WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
        ELSE 'CONTRACTION'
      END
      WHEN mrr = 0 THEN 'NA'
    END
    WHEN prev_status = 'FUTURE' THEN CASE
      WHEN STATUS IN ('ACTIVE', 'TRIAL') THEN CASE
        WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
        ELSE 'NEW'
      END
      WHEN STATUS = 'CANCELLED' THEN CASE
        WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
        ELSE 'CONTRACTION'
      END
      ELSE 'NA'
    END
    WHEN STATUS = 'FUTURE' THEN CASE
      WHEN prev_status = 'FUTURE' THEN 'NA'
      WHEN prev_status = 'ACTIVE' THEN CASE
        WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
        ELSE 'CONTRACTION'
      END
      ELSE 'FUTURE'
    END
    WHEN STATUS = 'PAUSED' THEN CASE
      WHEN prev_status = 'ACTIVE' THEN CASE
        WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
        ELSE 'CONTRACTION'
      END
      ELSE 'NA'
    END
    WHEN prev_status = 'PAUSED' THEN CASE
      WHEN STATUS = 'ACTIVE' THEN 'EXPANSION'
      WHEN STATUS = 'CANCELLED' THEN CASE
        WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
        ELSE 'CONTRACTION'
      END
      ELSE 'NA'
    END
    ELSE CASE
      WHEN prev_status = STATUS THEN CASE
        WHEN STATUS = 'CANCELLED'
        OR STATUS = 'TRIAL'
        OR prev_mrr = mrr THEN 'NA'
        WHEN prev_mrr > mrr THEN CASE
          WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
          ELSE 'CONTRACTION'
        END
        ELSE 'EXPANSION'
      END
      ELSE CASE
        WHEN prev_mrr > mrr THEN CASE
          WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE'
          ELSE 'CONTRACTION'
        END
        WHEN prev_mrr = mrr THEN 'NA'
        ELSE CASE
          WHEN prev_status = 'CANCELLED'
          AND mrr > 0
          AND STATUS = 'ACTIVE' THEN CASE
            WHEN date_trunc('DAY', activated_at) = date_trunc('DAY', period_start) THEN CASE
              WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
              ELSE 'NEW'
            END
            ELSE 'EXPANSION'
          END
          WHEN prev_status = 'TRIAL'
          AND mrr > 0
          AND STATUS = 'ACTIVE' THEN CASE
            WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
            ELSE 'NEW'
          END
        END
      END
    END
  END AS mrr_status,
  CASE
    WHEN (
      prev_subscription_id IS NULL
      AND STATUS = 'ACTIVE'
    )
    OR (
      prev_status = 'TRIAL'
      AND STATUS = 'ACTIVE'
    ) THEN CASE
      WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
      ELSE 'NEW'
    END
    WHEN STATUS = 'ACTIVE'
    AND prev_status = 'CANCELLED' THEN CASE
      WHEN date_trunc('DAY', activated_at) = date_trunc('DAY', period_start) THEN CASE
        WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
        ELSE 'NEW'
      END
      ELSE 'REACTIVE'
    END
    WHEN STATUS = 'TRIAL'
    AND prev_status = 'ACTIVE' THEN 'ACTIVE_TO_TRIAL'
    WHEN prev_status = STATUS THEN CASE
      WHEN STATUS = 'ACTIVE'
      AND prev_mrr = 0
      AND mrr > 0 THEN 'FREE_TO_PAID'
      WHEN STATUS = 'ACTIVE'
      AND prev_mrr > 0
      AND mrr > prev_mrr THEN 'UPGRADE'
      WHEN STATUS = 'ACTIVE'
      AND prev_mrr > 0
      AND mrr < prev_mrr THEN 'DOWNGRADE'
    END
    WHEN prev_status = 'FUTURE' THEN CASE
      WHEN STATUS = 'TRIAL' THEN CASE
        WHEN history_rule = 900 THEN 'NEW_TRIAL_FOR_CURRENCY_CHANGE'
        ELSE 'NEW_TRIAL'
      END
      WHEN STATUS = 'CANCELLED' THEN CASE
        WHEN history_rule = 1000 THEN 'CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE'
        ELSE 'CANCEL_FROM_FUTURE'
      END
      WHEN STATUS = 'ACTIVE' THEN CASE
        WHEN mrr > 0 THEN CASE
          WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
          ELSE 'NEW'
        END
        ELSE CASE
          WHEN history_rule = 900 THEN 'NEW_FREE_FOR_CURRENCY_CHANGE'
          ELSE 'NEW_FREE'
        END
      END
      ELSE 'NA'
    END
    WHEN STATUS = 'FUTURE' THEN CASE
      WHEN prev_status = 'FUTURE' THEN 'NA'
      WHEN prev_status = 'ACTIVE' THEN CASE
        WHEN prev_mrr > 0 THEN 'ACTIVE_TO_FUTURE'
        ELSE 'FREE_TO_FUTURE'
      END
      ELSE 'FUTURE'
    END
    WHEN prev_status = 'PAUSED' THEN CASE
      WHEN STATUS = 'FUTURE' THEN 'PAUSE_TO_FUTURE'
      WHEN STATUS = 'CANCELLED' THEN CASE
        WHEN history_rule = 1000 THEN 'CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE'
        ELSE 'CANCEL_FROM_PAUSE'
      END
      WHEN STATUS = 'ACTIVE' THEN CASE
        WHEN mrr > 0 THEN 'PAUSE_TO_PAID'
        ELSE 'PAUSE_TO_FREE'
      END
      WHEN STATUS = 'TRIAL' THEN 'PAUSE_TO_TRIAL'
      ELSE 'NA'
    END
    WHEN STATUS = 'PAUSED' THEN CASE
      WHEN prev_status = 'FUTURE' THEN 'PAUSE_FROM_FUTURE'
      WHEN prev_status = 'CANCELLED' THEN 'PAUSE_FROM_CANCEL'
      WHEN prev_status = 'TRIAL' THEN 'PAUSE_FROM_TRIAL'
      WHEN prev_status = 'ACTIVE' THEN CASE
        WHEN prev_mrr > 0 THEN 'PAUSE_FROM_PAID'
        ELSE 'PAUSE_FROM_FREE'
      END
      ELSE 'PAUSE_FROM_UNKNOWN'
    END
    ELSE CASE
      WHEN STATUS = 'CANCELLED' THEN CASE
        WHEN prev_status = 'TRIAL' THEN CASE
          WHEN history_rule = 1000 THEN 'CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE'
          ELSE 'CANCEL_FROM_TRIAL'
        END
        WHEN prev_mrr IS NULL THEN CASE
          WHEN history_rule = 1000 THEN 'CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE'
          ELSE 'CANCEL_FROM_UNKNOWN'
        END
        WHEN prev_mrr = 0 THEN CASE
          WHEN history_rule = 1000 THEN 'CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE'
          ELSE 'CANCEL_FROM_FREE'
        END
        ELSE CASE
          WHEN history_rule = 1000 THEN 'CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE'
          ELSE 'CANCEL_FROM_PAID'
        END
      END
    END
  END AS mrr_sub_status,
  CASE
    WHEN prev_mrr IS NOT NULL THEN abs(mrr - prev_mrr)
    ELSE mrr
  END AS mrr_diff,
  CASE
    WHEN prev_mrr IS NULL
    OR mrr IS NULL THEN 0
    WHEN mrr > prev_mrr THEN prev_mrr
    ELSE mrr
  END AS mrr_fluctuation,
  primary_product_id,
  primary_product_group,
  primary_product_mrr,
  line_item_qty,
  prev_product_id,
  prev_product_group,
  prev_product_mrr,
  'America/New_York' AS timezone,
  CASE
    WHEN prev_mrr > 0 THEN (((mrr - prev_mrr) * 1.0) / prev_mrr) * 100
  END AS mrr_diff_rate,
  CASE
    WHEN prev_mrr IS NOT NULL THEN mrr - prev_mrr
    ELSE mrr
  END AS mrr_diff_signed
FROM
  (
    SELECT
      subscriptions.handle AS subscription_handle,
      products.handle AS primary_product_handle,
      subscriptions.customer_handle AS customer_handle,
      subscription_histories.id AS id,
      subscription_histories.data_source_id AS data_source_id,
      subscription_histories.currency_code AS currency_code,
      subscription_histories.status AS STATUS,
      subscription_histories.cancel_reason AS cancel_reason,
      (subscription_histories.period_start) AS period_start,
      (subscription_histories.period_end) AS period_end,
      subscription_histories.is_cmrr,
      subscription_histories.history_rule AS history_rule,
      subscription_histories.discount AS discount,
      subscription_histories.subscription_id AS subscription_id,
      daily_calendars.cal_date AS cal_date,
      subscription_histories.mrr + GREATEST(subscription_histories.discount, 0) AS mrr,
      lag(
        subscription_histories.mrr + GREATEST(subscription_histories.discount, 0)
      ) OVER(
        PARTITION BY subscription_histories.subscription_id,
        subscription_histories.data_source_id
        ORDER BY
          daily_calendars.cal_date
      ) AS prev_mrr,
      lag(subscription_histories.status) OVER(
        PARTITION BY subscription_histories.subscription_id,
        subscription_histories.data_source_id
        ORDER BY
          daily_calendars.cal_date
      ) AS prev_status,
      lag(subscription_histories.history_rule) OVER(
        PARTITION BY subscription_histories.subscription_id,
        subscription_histories.data_source_id
        ORDER BY
          daily_calendars.cal_date
      ) AS prev_history_rule,
      lag(subscription_histories.discount) OVER(
        PARTITION BY subscription_histories.subscription_id,
        subscription_histories.data_source_id
        ORDER BY
          daily_calendars.cal_date
      ) AS prev_discount,
      lag(subscription_histories.subscription_id) OVER(
        PARTITION BY subscription_histories.subscription_id,
        subscription_histories.data_source_id
        ORDER BY
          daily_calendars.cal_date
      ) AS prev_subscription_id,
      (subscriptions.activated_at) AS activated_at,
      products.handle AS primary_product_id,
      products.product_group AS primary_product_group,
      LAG(products.handle) OVER (
        PARTITION BY subscription_histories.subscription_id,
        subscription_histories.data_source_id
        ORDER BY
          daily_calendars.cal_date
      ) AS prev_product_id,
      LAG(products.product_group) OVER (
        PARTITION BY subscription_histories.subscription_id,
        subscription_histories.data_source_id
        ORDER BY
          daily_calendars.cal_date
      ) AS prev_product_group,
      subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount, 0) AS primary_product_mrr,
      LAG(
        subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount, 0)
      ) OVER (
        PARTITION BY subscription_histories.subscription_id,
        subscription_histories.data_source_id
        ORDER BY
          daily_calendars.cal_date
      ) AS prev_product_mrr,
      subscription_component_histories.quantity AS line_item_qty
    FROM
      ""subscription_histories""
      INNER JOIN ""daily_calendars"" ON date_trunc('second', daily_calendars.cal_date) BETWEEN subscription_histories.period_start
      AND subscription_histories.period_end
      AND date_trunc('DAY', cast('2020-01-02 00:00:00' as timestamp)) > date_trunc('DAY', daily_calendars.cal_date)
      OR (
        DATE_TRUNC('DAY',cast('2020-01-02 00:00:00' as timestamp)) = DATE_TRUNC('DAY', daily_calendars.cal_date)
        AND (cast('2020-06-02 00:00:00' as timestamp)) BETWEEN subscription_histories.period_start
        AND subscription_histories.period_end
      )
      INNER JOIN subscriptions ON subscriptions.id = subscription_histories.subscription_id
      AND subscriptions.data_source_id = subscription_histories.data_source_id
      INNER JOIN subscription_component_histories ON subscription_histories.id = subscription_component_histories.subscription_history_id
      AND subscription_histories.data_source_id = subscription_component_histories.data_source_id
      INNER JOIN products ON products.id = subscription_component_histories.product_id
      AND products.product_type = 'PLAN'
      AND products.data_source_id = subscription_component_histories.data_source_id
    WHERE
      subscription_histories.data_source_id IN (798, 751, 791)
      AND subscriptions.data_source_id IN (798, 751, 791)
      AND subscription_component_histories.data_source_id IN (798, 751, 791)
      AND products.data_source_id IN (798, 751, 791)
  )","['subscription_component_histories', 'subscriptions', 'products', 'subscription_histories', 'daily_calendars']"
1363968,"-- RS7
with monthly_subscription_histories as (SELECT cal_date,
          id,
          data_source_id,
          currency_code,
          mrr,
          status,
          cancel_reason,
          period_start,
          period_end,
          discount,
          customer_handle,
          subscription_handle,
          primary_product_handle,
          subscription_id,
          CASE
              WHEN prev_subscription_id IS NULL THEN CASE
                                                         WHEN mrr>0 THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                                         WHEN status = 'CANCELLED' THEN CASE
                                                                                            WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('CONTRACTION' as varchar)
                                                                                        END
                                                         WHEN mrr=0 THEN cast('NA' as varchar)
                                                     END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status IN ('ACTIVE',
                                                                   'TRIAL') THEN CASE
                                                                                     WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('NEW' as varchar)
                                                                                 END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('NA' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'ACTIVE' THEN cast('EXPANSION' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              ELSE CASE
                       WHEN prev_status=status THEN CASE
                                                        WHEN status = 'CANCELLED'
                                                             OR status = 'TRIAL'
                                                             OR prev_mrr = mrr THEN cast('NA' as varchar)
                                                        WHEN prev_mrr > mrr THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CONTRACTION' as varchar)
                                                                                 END
                                                        ELSE cast('EXPANSION' as varchar)
                                                    END
                       ELSE CASE
                                WHEN prev_mrr > mrr THEN CASE
                                                             WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                             ELSE cast('CONTRACTION' as varchar)
                                                         END
                                WHEN prev_mrr = mrr THEN cast('NA' as varchar)
                                ELSE CASE
                                         WHEN prev_status = 'CANCELLED'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN date_trunc('month',activated_at) = date_trunc('month',period_start) THEN CASE
WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
ELSE cast('NEW' as varchar)
END
ELSE 'EXPANSION'
                                                                         END
                                         WHEN prev_status = 'TRIAL'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                     END
                            END
                   END
          END AS mrr_status,
          CASE
              WHEN (prev_subscription_id IS NULL
                    AND status = 'ACTIVE')
                   OR (prev_status = 'TRIAL'
                       AND status = 'ACTIVE') THEN CASE
                                                       WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                       ELSE cast('NEW' as varchar)
                                                   END
              WHEN status = 'ACTIVE'
                   AND prev_status = 'CANCELLED' THEN CASE
                                                          WHEN date_trunc('month',activated_at) = date_trunc('month',period_start) THEN CASE
                                                                                                                                        WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                                                        ELSE cast('NEW' as varchar)
                                                                                                                                    END
                                                          ELSE cast('REACTIVE' as varchar)
                                                      END
              WHEN status = 'TRIAL'
                   AND prev_status = 'ACTIVE' THEN cast('ACTIVE_TO_TRIAL' as varchar)
              WHEN prev_status = status THEN CASE
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr = 0
                                                      AND mrr > 0 THEN cast('FREE_TO_PAID' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr > prev_mrr THEN cast('UPGRADE' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr < prev_mrr THEN cast('DOWNGRADE' as varchar)
                                             END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status = 'TRIAL' THEN CASE
                                                                                  WHEN history_rule = 900 THEN cast('NEW_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                  ELSE cast('NEW_TRIAL' as varchar)
                                                                              END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_FUTURE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN CASE
                                                                                                         WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                         ELSE cast('NEW' as varchar)
                                                                                                     END
                                                                                   ELSE CASE
                                                                                            WHEN history_rule = 900 THEN cast('NEW_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('NEW_FREE' as varchar)
                                                                                        END
                                                                               END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('ACTIVE_TO_FUTURE' as varchar)
                                                                                   ELSE cast('FREE_TO_FUTURE' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'FUTURE' THEN cast('PAUSE_TO_FUTURE' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_PAUSE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN cast('PAUSE_TO_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_TO_FREE' as varchar)
                                                                               END
                                                   WHEN status = 'TRIAL' THEN cast('PAUSE_TO_TRIAL' as varchar)
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('PAUSE_FROM_FUTURE' as varchar)
                                              WHEN prev_status = 'CANCELLED' THEN cast('PAUSE_FROM_CANCEL' as varchar)
                                              WHEN prev_status = 'TRIAL' THEN cast('PAUSE_FROM_TRIAL' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('PAUSE_FROM_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_FROM_FREE' as varchar)
                                                                               END
                                              ELSE cast('PAUSE_FROM_UNKNOWN' as varchar)
                                          END
              ELSE CASE
                       WHEN status = 'CANCELLED' THEN CASE
                                                          WHEN prev_status = 'TRIAL' THEN CASE
                                                                                              WHEN history_rule = 1000 THEN cast('CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                              ELSE cast('CANCEL_FROM_TRIAL' as varchar)
                                                                                          END
                                                          WHEN prev_mrr IS NULL THEN CASE
                                                                                         WHEN history_rule = 1000 THEN cast('CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE' as varchar)
                                                                                         ELSE cast('CANCEL_FROM_UNKNOWN' as varchar)
                                                                                     END
                                                          WHEN prev_mrr = 0 THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CANCEL_FROM_FREE' as varchar)
                                                                                 END
                                                          ELSE CASE
                                                                   WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE' as varchar)
                                                                   ELSE cast('CANCEL_FROM_PAID' as varchar)
                                                               END
                                                      END
                   END
          END AS mrr_sub_status,
          CASE
              WHEN prev_mrr IS NOT NULL THEN abs(mrr-prev_mrr)
              ELSE mrr
          END AS mrr_diff ,
          CASE
              WHEN prev_mrr IS NULL
                   OR mrr IS NULL THEN 0
              WHEN mrr>prev_mrr THEN prev_mrr
              ELSE mrr
          END AS mrr_fluctuation,
          primary_product_id,
          primary_product_group,
          primary_product_mrr,
          line_item_qty ,
          prev_product_id,
          prev_product_group,
          prev_product_mrr ,
          'America/New_York' AS timezone ,
          CASE
              WHEN prev_mrr > 0 THEN (((mrr - prev_mrr) * 1.0) / prev_mrr) * 100
          END AS mrr_diff_rate,
          CASE
              WHEN prev_mrr IS NOT NULL THEN mrr-prev_mrr
              ELSE mrr
          END AS mrr_diff_signed
   FROM
     (SELECT subscriptions.handle AS subscription_handle,
             products.handle AS primary_product_handle,
             subscriptions.customer_handle AS customer_handle,
             subscription_histories.id AS id,
             subscription_histories.data_source_id AS data_source_id,
             subscription_histories.currency_code AS currency_code,
             subscription_histories.status AS status,
             subscription_histories.cancel_reason AS cancel_reason,
             (subscription_histories.period_start) AS period_start,
             (subscription_histories.period_end) AS period_end,
             subscription_histories.is_cmrr,
             subscription_histories.history_rule AS history_rule,
             subscription_histories.discount AS discount,
             subscription_histories.subscription_id AS subscription_id,
             daily_calendars.cal_date AS cal_date,
             subscription_histories.mrr + GREATEST(subscription_histories.discount,0) AS mrr,
             lag(subscription_histories.mrr + GREATEST(subscription_histories.discount,0)) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                                                                       ORDER BY daily_calendars.cal_date) AS prev_mrr,
             lag(subscription_histories.status) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                            ORDER BY daily_calendars.cal_date) AS prev_status,
             lag(subscription_histories.history_rule) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                  ORDER BY daily_calendars.cal_date) AS prev_history_rule,
             lag(subscription_histories.discount) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                              ORDER BY daily_calendars.cal_date) AS prev_discount,
             lag(subscription_histories.subscription_id) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                     ORDER BY daily_calendars.cal_date) AS prev_subscription_id,
             (subscriptions.activated_at) AS activated_at,
             products.handle AS primary_product_id,
             products.product_group AS primary_product_group,
             LAG(products.handle) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                               ORDER BY daily_calendars.cal_date) AS prev_product_id,
             LAG(products.product_group) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                      ORDER BY daily_calendars.cal_date) AS prev_product_group,
             subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0) AS primary_product_mrr,
             LAG(subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0)) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id ORDER BY daily_calendars.cal_date) AS prev_product_mrr,
             subscription_component_histories.quantity AS line_item_qty
FROM ""subscription_histories""
INNER JOIN ""daily_calendars"" 
ON date_trunc('second',daily_calendars.cal_date) BETWEEN 
subscription_histories.period_start AND subscription_histories.period_end
AND date_trunc('month',cast('2020-01-02 00:00:00' as timestamp) )>date_trunc('month',daily_calendars.cal_date)
OR (DATE_TRUNC('month',(cast('2020-01-02 00:00:00' as timestamp)) )=DATE_TRUNC('month',daily_calendars.cal_date)
AND (cast('2020-06-02 00:00:00' as timestamp)) BETWEEN subscription_histories.period_start
AND 
subscription_histories.period_end)
INNER JOIN subscriptions ON subscriptions.id=subscription_histories.subscription_id
AND subscriptions.data_source_id=subscription_histories.data_source_id
INNER JOIN subscription_component_histories ON subscription_histories.id=subscription_component_histories.subscription_history_id
AND subscription_histories.data_source_id=subscription_component_histories.data_source_id
INNER JOIN products ON products.id=subscription_component_histories.product_id
AND products.product_type='PLAN'
AND products.data_source_id=subscription_component_histories.data_source_id
WHERE
subscription_histories.data_source_id IN (798, 751, 791)
AND subscriptions.data_source_id IN (798, 751, 791)
AND subscription_component_histories.data_source_id IN (798, 751, 791)
AND products.data_source_id IN(798, 751, 791))
)


SELECT date_trunc('month', T1.cal_date) ""MONTH AND YEAR"",
       greatest(Sum (CASE WHEN T1.mrr_status ='EXPANSION' THEN T1.mrr_diff
       END ), 0)
       + greatest(Sum (CASE WHEN T1.mrr_status = 'NEW' THEN T1.mrr_diff END ),
       0) -
       greatest(Sum (CASE
                       WHEN T1.mrr_status = 'CONTRACTION' THEN T1.mrr_diff
                     END), 0)             ""MRR GROWTH""
FROM   monthly_subscription_histories T1
WHERE  ( T1.data_source_id = 768 )
       AND ( extract(day from datetime(datetime('2020-06-30 15:30:08','UTC' ),'Asia/Kolkata' )) >= extract(day from T1.period_start) )
       AND date_trunc('month', T1.cal_date) BETWEEN '2020-05-30 00:00:00' AND '2020-09-30 23:59:59'
GROUP  BY date_trunc('month', T1.cal_date)
ORDER  BY date_trunc('month', T1.cal_date) ASC","['subscription_component_histories', 'subscriptions', 'products', 'subscription_histories', 'daily_calendars']"
1299240,"-- RS44,
select CASE
         WHEN T1.""invoice ds"" IS NOT NULL THEN T1.""invoice ds""
         ELSE T2.""creditnote ds""
       END as c1,
       Greatest(T1.""total billing"", 0) - Greatest(T2.""total credit notes"", 0)
       ""Net Value""
FROM   (SELECT T1.""data_source_id"" ""Invoice DS"",
               SUM(T1.""total"")     ""TOTAL BILLING""
        FROM   invoices T1
        WHERE  ( T1.data_source_id = 794 )
               AND ( T1.""status"" IN( 'NOT_PAID', 'PAID', 'PAYMENT_DUE', 'POSTED'
                                   ) )
               AND ( T1.""currency_code"" IS NOT NULL )
        GROUP  BY T1.""data_source_id""
        ORDER  BY T1.""data_source_id"" ASC) T1
       full outer join (SELECT T1.""data_source_id"" ""CreditNote DS"",
                               SUM(T1.""total"")     ""Total Credit Notes""
                        FROM   credit_notes T1
                        WHERE  ( T1.data_source_id = 794 )
                               AND ( T1.""status"" IN( 'POSTED', 'CANCELLED',
                                                     'ACTIVE' ) )
                               AND ( T1.""currency_code"" IS NOT NULL )
                        GROUP  BY T1.""data_source_id""
                        ORDER  BY T1.""data_source_id"" ASC) T2
                    ON Coalesce(cast(T1.""invoice ds"" as varchar), '') =
                       Coalesce(cast(T2.""creditnote ds"" as varchar), '')
ORDER  BY c1 ASC","['invoices', 'credit_notes']"
1300382,"select * from ""cb-test"".""chargebee_prod_v2_1gb"".""payments"" limit 10",['chargebee_prod_v2_1gb.payments']
1300967,"with daily_exr_calendars as
  (select t1.cal_date,
          t1.currency_code,
          (t2.exchange_rate / t1.exchange_rate) ""exchange_rate""
   from daily_exr_calendars t1
   inner join daily_exr_calendars t2 on t2.currency_code = 'USD'
   and cast(cast(t1.cal_date as timestamp) as date) = cast(cast(t2.cal_date as timestamp) as date)
   where T1.cal_date between '2022-09-01 00:00:00' and '2023-10-31 23:59:59'
   order by t1.cal_date)
select date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) ""MONTH AND YEAR OF INVOICE DATE - INSTA"",
       SUM(((T2.""total"") * daily_exr_calendars.exchange_rate)) ""TOTAL BILLING""
from invoices_part T2
inner join daily_exr_calendars on DATE_TRUNC('day', datetime(datetime(daily_exr_calendars.""cal_date"", 'UTC'), 'America/Los_Angeles')) = DATE_TRUNC('day', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles'))
and daily_exr_calendars.""currency_code"" = T2.""currency_code""
where (T2.data_source_id = 751)
  and (date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) <> date_trunc('month', cast('2023-11-06 22:47:23' as timestamp)))
  and (T2.""status"" in('NOT_PAID',
                      'PAID',
                      'PAYMENT_DUE',
                      'POSTED'))
  and (T2.""currency_code"" is not null)
  and T2.""date"" between '2022-09-01 07:00:00' and '2023-11-01 06:59:59'
  and T2.""date"" >= '2018-12-01 00:00:00'
group by 1
order by 1 asc",['invoices_part']
1363962,"-- RS2
with weekly_subscription_histories as (SELECT cal_date,
          id,
          data_source_id,
          currency_code,
          mrr,
          status,
          cancel_reason,
          period_start,
          period_end,
          discount,
          customer_handle,
          subscription_handle,
          primary_product_handle,
          subscription_id,
          CASE
              WHEN prev_subscription_id IS NULL THEN CASE
                                                         WHEN mrr>0 THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                                         WHEN status = 'CANCELLED' THEN CASE
                                                                                            WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('CONTRACTION' as varchar)
                                                                                        END
                                                         WHEN mrr=0 THEN cast('NA' as varchar)
                                                     END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status IN ('ACTIVE',
                                                                   'TRIAL') THEN CASE
                                                                                     WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('NEW' as varchar)
                                                                                 END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('NA' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'ACTIVE' THEN cast('EXPANSION' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              ELSE CASE
                       WHEN prev_status=status THEN CASE
                                                        WHEN status = 'CANCELLED'
                                                             OR status = 'TRIAL'
                                                             OR prev_mrr = mrr THEN 'NA'
                                                        WHEN prev_mrr > mrr THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CONTRACTION' as varchar)
                                                                                 END
                                                        ELSE cast('EXPANSION' as varchar)
                                                    END
                       ELSE CASE
                                WHEN prev_mrr > mrr THEN CASE
                                                             WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                             ELSE cast('CONTRACTION' as varchar)
                                                         END
                                WHEN prev_mrr = mrr THEN cast('NA' as varchar)
                                ELSE CASE
                                         WHEN prev_status = 'CANCELLED'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN date_trunc('week',activated_at) = date_trunc('week',period_start) THEN CASE
WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
ELSE cast('NEW' as varchar)
END
ELSE cast('EXPANSION' as varchar)
                                                                         END
                                         WHEN prev_status = 'TRIAL'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                     END
                            END
                   END
          END AS mrr_status,
          CASE
              WHEN (prev_subscription_id IS NULL
                    AND status = 'ACTIVE')
                   OR (prev_status = 'TRIAL'
                       AND status = 'ACTIVE') THEN CASE
                                                       WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                       ELSE cast('NEW' as varchar)
                                                   END
              WHEN status = 'ACTIVE'
                   AND prev_status = 'CANCELLED' THEN CASE
                                                          WHEN date_trunc('week',activated_at) = date_trunc('week',period_start) THEN CASE
                                                                                                                                        WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                                                        ELSE cast('NEW' as varchar)
                                                                                                                                    END
                                                          ELSE cast('REACTIVE' as varchar)
                                                      END
              WHEN status = 'TRIAL'
                   AND prev_status = 'ACTIVE' THEN cast('ACTIVE_TO_TRIAL' as varchar)
              WHEN prev_status = status THEN CASE
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr = 0
                                                      AND mrr > 0 THEN cast('FREE_TO_PAID' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr > prev_mrr THEN cast('UPGRADE' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr < prev_mrr THEN cast('DOWNGRADE' as varchar)
                                             END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status = 'TRIAL' THEN CASE
                                                                                  WHEN history_rule = 900 THEN cast('NEW_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                  ELSE cast('NEW_TRIAL' as varchar)
                                                                              END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_FUTURE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN CASE
                                                                                                         WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                         ELSE cast('NEW' as varchar)
                                                                                                     END
                                                                                   ELSE CASE
                                                                                            WHEN history_rule = 900 THEN cast('NEW_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('NEW_FREE' as varchar)
                                                                                        END
                                                                               END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('ACTIVE_TO_FUTURE' as varchar)
                                                                                   ELSE cast('FREE_TO_FUTURE' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'FUTURE' THEN cast('PAUSE_TO_FUTURE' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_PAUSE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN cast('PAUSE_TO_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_TO_FREE' as varchar)
                                                                               END
                                                   WHEN status = 'TRIAL' THEN cast('PAUSE_TO_TRIAL' as varchar)
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('PAUSE_FROM_FUTURE' as varchar)
                                              WHEN prev_status = 'CANCELLED' THEN cast('PAUSE_FROM_CANCEL' as varchar)
                                              WHEN prev_status = 'TRIAL' THEN cast('PAUSE_FROM_TRIAL' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('PAUSE_FROM_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_FROM_FREE' as varchar)
                                                                               END
                                              ELSE cast('PAUSE_FROM_UNKNOWN' as varchar)
                                          END
              ELSE CASE
                       WHEN status = 'CANCELLED' THEN CASE
                                                          WHEN prev_status = 'TRIAL' THEN CASE
                                                                                              WHEN history_rule = 1000 THEN cast('CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                              ELSE cast('CANCEL_FROM_TRIAL' as varchar)
                                                                                          END
                                                          WHEN prev_mrr IS NULL THEN CASE
                                                                                         WHEN history_rule = 1000 THEN cast('CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE' as varchar)
                                                                                         ELSE cast('CANCEL_FROM_UNKNOWN' as varchar)
                                                                                     END
                                                          WHEN prev_mrr = 0 THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CANCEL_FROM_FREE' as varchar)
                                                                                 END
                                                          ELSE CASE
                                                                   WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE' as varchar)
                                                                   ELSE cast('CANCEL_FROM_PAID' as varchar)
                                                               END
                                                      END
                   END
          END AS mrr_sub_status,
          CASE
              WHEN prev_mrr IS NOT NULL THEN abs(mrr-prev_mrr)
              ELSE mrr
          END AS mrr_diff ,
          CASE
              WHEN prev_mrr IS NULL
                   OR mrr IS NULL THEN 0
              WHEN mrr>prev_mrr THEN prev_mrr
              ELSE mrr
          END AS mrr_fluctuation,
          primary_product_id,
          primary_product_group,
          primary_product_mrr,
          line_item_qty ,
          prev_product_id,
          prev_product_group,
          prev_product_mrr ,
          'America/New_York' AS timezone ,
          CASE
              WHEN prev_mrr > 0 THEN (((mrr - prev_mrr) * 1.0) / prev_mrr) * 100
          END AS mrr_diff_rate,
          CASE
              WHEN prev_mrr IS NOT NULL THEN mrr-prev_mrr
              ELSE mrr
          END AS mrr_diff_signed
   FROM
     (SELECT subscriptions.handle AS subscription_handle,
             products.handle AS primary_product_handle,
             subscriptions.customer_handle AS customer_handle,
             subscription_histories.id AS id,
             subscription_histories.data_source_id AS data_source_id,
             subscription_histories.currency_code AS currency_code,
             subscription_histories.status AS status,
             subscription_histories.cancel_reason AS cancel_reason,
             (subscription_histories.period_start) AS period_start,
             (subscription_histories.period_end) AS period_end,
             subscription_histories.is_cmrr,
             subscription_histories.history_rule AS history_rule,
             subscription_histories.discount AS discount,
             subscription_histories.subscription_id AS subscription_id,
             daily_calendars.cal_date AS cal_date,
             subscription_histories.mrr + GREATEST(subscription_histories.discount,0) AS mrr,
             lag(subscription_histories.mrr + GREATEST(subscription_histories.discount,0)) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                                                                       ORDER BY daily_calendars.cal_date) AS prev_mrr,
             lag(subscription_histories.status) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                            ORDER BY daily_calendars.cal_date) AS prev_status,
             lag(subscription_histories.history_rule) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                  ORDER BY daily_calendars.cal_date) AS prev_history_rule,
             lag(subscription_histories.discount) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                              ORDER BY daily_calendars.cal_date) AS prev_discount,
             lag(subscription_histories.subscription_id) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                     ORDER BY daily_calendars.cal_date) AS prev_subscription_id,
             (subscriptions.activated_at) AS activated_at,
             products.handle AS primary_product_id,
             products.product_group AS primary_product_group,
             LAG(products.handle) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                               ORDER BY daily_calendars.cal_date) AS prev_product_id,
             LAG(products.product_group) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                      ORDER BY daily_calendars.cal_date) AS prev_product_group,
             subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0) AS primary_product_mrr,
             LAG(subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0)) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id ORDER BY daily_calendars.cal_date) AS prev_product_mrr,
             subscription_component_histories.quantity AS line_item_qty
FROM ""subscription_histories""
INNER JOIN ""daily_calendars"" 
ON date_trunc('second',daily_calendars.cal_date) BETWEEN 
subscription_histories.period_start AND subscription_histories.period_end
AND date_trunc('week',cast('2020-01-02 00:00:00' as timestamp) )>date_trunc('week',daily_calendars.cal_date)
OR (DATE_TRUNC('week',(cast('2020-01-02 00:00:00' as timestamp)) )=DATE_TRUNC('week',daily_calendars.cal_date)
AND (cast('2020-06-02 00:00:00' as timestamp)) BETWEEN subscription_histories.period_start
AND 
subscription_histories.period_end)
INNER JOIN subscriptions ON subscriptions.id=subscription_histories.subscription_id
AND subscriptions.data_source_id=subscription_histories.data_source_id
INNER JOIN subscription_component_histories ON subscription_histories.id=subscription_component_histories.subscription_history_id
AND subscription_histories.data_source_id=subscription_component_histories.data_source_id
INNER JOIN products ON products.id=subscription_component_histories.product_id
AND products.product_type='PLAN'
AND products.data_source_id=subscription_component_histories.data_source_id
WHERE
subscription_histories.data_source_id IN (798, 751, 791)
AND subscriptions.data_source_id IN (798, 751, 791)
AND subscription_component_histories.data_source_id IN (798, 751, 791)
AND products.data_source_id IN(798, 751, 791))
)

SELECT DATE_TRUNC('week',T1.cal_date) ""WEEK AND YEAR"",
        T2.handle ""handle"",
        SUM(
                CASE 
                        WHEN T1.mrr_sub_status = 'FREE_TO_PAID'
                                THEN T1.mrr_diff
                END
        ) ""FREE TO PAID""
FROM weekly_subscription_histories T1
        INNER JOIN products T2
                ON T2.handle = T1.primary_product_id
                        AND T2.data_source_id = T1.data_source_id
WHERE ( T1.data_source_id = 768 )
GROUP BY DATE_TRUNC('week',T1.cal_date),
                T2.handle
ORDER BY DATE_TRUNC('week',T1.cal_date) ASC,
                T2.handle ASC","['subscription_component_histories', 'subscriptions', 'products', 'subscription_histories', 'daily_calendars']"
1363967,"-- RS6,
select date_trunc('day',datetime(datetime(T1.""date"",'UTC'),'Asia/Kolkata')), 
count(case when T1.""status"" IN( 'VOIDED' ) THEN T1.""handle"" END) ""Total Payments Voided""
from payments T1
WHERE  ( T1.data_source_id = 790 )
GROUP  BY date_trunc('day',datetime(datetime(T1.""date"",'UTC'),'Asia/Kolkata'))
ORDER  BY date_trunc('day',datetime(datetime(T1.""date"",'UTC'),'Asia/Kolkata')) ASC 
limit 1000",['payments']
1363969,"-- RS8
with weekly_subscription_histories as (SELECT cal_date,
          id,
          data_source_id,
          currency_code,
          mrr,
          status,
          cancel_reason,
          period_start,
          period_end,
          discount,
          customer_handle,
          subscription_handle,
          primary_product_handle,
          subscription_id,
          CASE
              WHEN prev_subscription_id IS NULL THEN CASE
                                                         WHEN mrr>0 THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE 'NEW'
                                                                         END
                                                         WHEN status = 'CANCELLED' THEN CASE
                                                                                            WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('CONTRACTION' as varchar)
                                                                                        END
                                                         WHEN mrr=0 THEN cast('NA' as varchar)
                                                     END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status IN ('ACTIVE',
                                                                   'TRIAL') THEN CASE
                                                                                     WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('NEW' as varchar)
                                                                                 END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('NA' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'ACTIVE' THEN cast('EXPANSION' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              ELSE CASE
                       WHEN prev_status=status THEN CASE
                                                        WHEN status = 'CANCELLED'
                                                             OR status = 'TRIAL'
                                                             OR prev_mrr = mrr THEN 'NA'
                                                        WHEN prev_mrr > mrr THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CONTRACTION' as varchar)
                                                                                 END
                                                        ELSE cast('EXPANSION' as varchar)
                                                    END
                       ELSE CASE
                                WHEN prev_mrr > mrr THEN CASE
                                                             WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                             ELSE cast('CONTRACTION' as varchar)
                                                         END
                                WHEN prev_mrr = mrr THEN cast('NA' as varchar)
                                ELSE CASE
                                         WHEN prev_status = 'CANCELLED'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN date_trunc('week',activated_at) = date_trunc('week',period_start) THEN CASE
WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
ELSE cast('NEW' as varchar)
END
ELSE cast('EXPANSION' as varchar)
                                                                         END
                                         WHEN prev_status = 'TRIAL'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                     END
                            END
                   END
          END AS mrr_status,
          CASE
              WHEN (prev_subscription_id IS NULL
                    AND status = 'ACTIVE')
                   OR (prev_status = 'TRIAL'
                       AND status = 'ACTIVE') THEN CASE
                                                       WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                       ELSE cast('NEW' as varchar)
                                                   END
              WHEN status = 'ACTIVE'
                   AND prev_status = 'CANCELLED' THEN CASE
                                                          WHEN date_trunc('week',activated_at) = date_trunc('week',period_start) THEN CASE
                                                                                                                                        WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                                                        ELSE cast('NEW' as varchar)
                                                                                                                                    END
                                                          ELSE cast('REACTIVE' as varchar)
                                                      END
              WHEN status = 'TRIAL'
                   AND prev_status = 'ACTIVE' THEN cast('ACTIVE_TO_TRIAL' as varchar)
              WHEN prev_status = status THEN CASE
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr = 0
                                                      AND mrr > 0 THEN cast('FREE_TO_PAID' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr > prev_mrr THEN cast('UPGRADE' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr < prev_mrr THEN cast('DOWNGRADE' as varchar)
                                             END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status = 'TRIAL' THEN CASE
                                                                                  WHEN history_rule = 900 THEN cast('NEW_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                  ELSE cast('NEW_TRIAL' as varchar)
                                                                              END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_FUTURE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN CASE
                                                                                                         WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                         ELSE cast('NEW' as varchar)
                                                                                                     END
                                                                                   ELSE CASE
                                                                                            WHEN history_rule = 900 THEN cast('NEW_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('NEW_FREE' as varchar)
                                                                                        END
                                                                               END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('ACTIVE_TO_FUTURE' as varchar)
                                                                                   ELSE cast('FREE_TO_FUTURE' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'FUTURE' THEN cast('PAUSE_TO_FUTURE' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_PAUSE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN cast('PAUSE_TO_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_TO_FREE' as varchar)
                                                                               END
                                                   WHEN status = 'TRIAL' THEN cast('PAUSE_TO_TRIAL' as varchar)
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('PAUSE_FROM_FUTURE' as varchar)
                                              WHEN prev_status = 'CANCELLED' THEN cast('PAUSE_FROM_CANCEL' as varchar)
                                              WHEN prev_status = 'TRIAL' THEN cast('PAUSE_FROM_TRIAL' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('PAUSE_FROM_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_FROM_FREE' as varchar)
                                                                               END
                                              ELSE cast('PAUSE_FROM_UNKNOWN' as varchar)
                                          END
              ELSE CASE
                       WHEN status = 'CANCELLED' THEN CASE
                                                          WHEN prev_status = 'TRIAL' THEN CASE
                                                                                              WHEN history_rule = 1000 THEN cast('CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                              ELSE cast('CANCEL_FROM_TRIAL' as varchar)
                                                                                          END
                                                          WHEN prev_mrr IS NULL THEN CASE
                                                                                         WHEN history_rule = 1000 THEN cast('CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE' as varchar)
                                                                                         ELSE cast('CANCEL_FROM_UNKNOWN' as varchar)
                                                                                     END
                                                          WHEN prev_mrr = 0 THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CANCEL_FROM_FREE' as varchar)
                                                                                 END
                                                          ELSE CASE
                                                                   WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE' as varchar)
                                                                   ELSE cast('CANCEL_FROM_PAID' as varchar)
                                                               END
                                                      END
                   END
          END AS mrr_sub_status,
          CASE
              WHEN prev_mrr IS NOT NULL THEN abs(mrr-prev_mrr)
              ELSE mrr
          END AS mrr_diff ,
          CASE
              WHEN prev_mrr IS NULL
                   OR mrr IS NULL THEN 0
              WHEN mrr>prev_mrr THEN prev_mrr
              ELSE mrr
          END AS mrr_fluctuation,
          primary_product_id,
          primary_product_group,
          primary_product_mrr,
          line_item_qty ,
          prev_product_id,
          prev_product_group,
          prev_product_mrr ,
          'America/New_York' AS timezone ,
          CASE
              WHEN prev_mrr > 0 THEN (((mrr - prev_mrr) * 1.0) / prev_mrr) * 100
          END AS mrr_diff_rate,
          CASE
              WHEN prev_mrr IS NOT NULL THEN mrr-prev_mrr
              ELSE mrr
          END AS mrr_diff_signed
   FROM
     (SELECT subscriptions.handle AS subscription_handle,
             products.handle AS primary_product_handle,
             subscriptions.customer_handle AS customer_handle,
             subscription_histories.id AS id,
             subscription_histories.data_source_id AS data_source_id,
             subscription_histories.currency_code AS currency_code,
             subscription_histories.status AS status,
             subscription_histories.cancel_reason AS cancel_reason,
             (subscription_histories.period_start) AS period_start,
             (subscription_histories.period_end) AS period_end,
             subscription_histories.is_cmrr,
             subscription_histories.history_rule AS history_rule,
             subscription_histories.discount AS discount,
             subscription_histories.subscription_id AS subscription_id,
             daily_calendars.cal_date AS cal_date,
             subscription_histories.mrr + GREATEST(subscription_histories.discount,0) AS mrr,
             lag(subscription_histories.mrr + GREATEST(subscription_histories.discount,0)) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                                                                       ORDER BY daily_calendars.cal_date) AS prev_mrr,
             lag(subscription_histories.status) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                            ORDER BY daily_calendars.cal_date) AS prev_status,
             lag(subscription_histories.history_rule) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                  ORDER BY daily_calendars.cal_date) AS prev_history_rule,
             lag(subscription_histories.discount) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                              ORDER BY daily_calendars.cal_date) AS prev_discount,
             lag(subscription_histories.subscription_id) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                     ORDER BY daily_calendars.cal_date) AS prev_subscription_id,
             (subscriptions.activated_at) AS activated_at,
             products.handle AS primary_product_id,
             products.product_group AS primary_product_group,
             LAG(products.handle) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                               ORDER BY daily_calendars.cal_date) AS prev_product_id,
             LAG(products.product_group) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                      ORDER BY daily_calendars.cal_date) AS prev_product_group,
             subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0) AS primary_product_mrr,
             LAG(subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0)) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id ORDER BY daily_calendars.cal_date) AS prev_product_mrr,
             subscription_component_histories.quantity AS line_item_qty
FROM ""subscription_histories""
INNER JOIN ""daily_calendars"" 
ON date_trunc('second',daily_calendars.cal_date) BETWEEN 
subscription_histories.period_start AND subscription_histories.period_end
AND date_trunc('week',cast('2020-01-02 00:00:00' as timestamp) )>date_trunc('week',daily_calendars.cal_date)
OR (DATE_TRUNC('week',(cast('2020-01-02 00:00:00' as timestamp)) )=DATE_TRUNC('week',daily_calendars.cal_date)
AND (cast('2020-06-02 00:00:00' as timestamp)) BETWEEN subscription_histories.period_start
AND 
subscription_histories.period_end)
INNER JOIN subscriptions ON subscriptions.id=subscription_histories.subscription_id
AND subscriptions.data_source_id=subscription_histories.data_source_id
INNER JOIN subscription_component_histories ON subscription_histories.id=subscription_component_histories.subscription_history_id
AND subscription_histories.data_source_id=subscription_component_histories.data_source_id
INNER JOIN products ON products.id=subscription_component_histories.product_id
AND products.product_type='PLAN'
AND products.data_source_id=subscription_component_histories.data_source_id
WHERE
subscription_histories.data_source_id IN (798, 751, 791)
AND subscriptions.data_source_id IN (798, 751, 791)
AND subscription_component_histories.data_source_id IN (798, 751, 791)
AND products.data_source_id IN(798, 751, 791))
)

SELECT date_trunc('week', T1.cal_date) ""WEEK AND YEAR"",
       Count (CASE
                WHEN T1.mrr_sub_status = 'FREE_TO_PAID' OR T1.mrr_sub_status = 'NEW' AND T1.mrr > 0 THEN T1.mrr_diff
              END)                       ""NEW PAID CUSTOMERS""
FROM   weekly_subscription_histories T1
WHERE  ( T1.data_source_id = 768 )
       AND ( Extract(dow FROM datetime(datetime('2020-05-30 15:37:23', 'UTC' ),'Asia/Kolkata' )) >= Extract(dow FROM T1.period_start))
       AND date_trunc('week', T1.cal_date) BETWEEN
           '2020-04-01 00:00:00' AND '2020-06-30 23:59:59'
GROUP  BY date_trunc('week', T1.cal_date)
ORDER  BY date_trunc('week', T1.cal_date) ASC","['subscription_component_histories', 'subscriptions', 'products', 'subscription_histories', 'daily_calendars']"
1373122,"with monthly_subscription_histories_part as
  (select T1.*,
          case
              when prev_status = 'PAUSED' then case
                                                   when status = 'CANCELLED' then case
                                                                                      when history_rule = 1000 then 'CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE'
                                                                                      else 'CANCEL_FROM_PAUSE'
                                                                                  end
                                               end
              else case
                       when status = 'CANCELLED'
                            and prev_status != 'CANCELLED' then case
                                                                    when prev_status = 'TRIAL' then case
                                                                                                        when history_rule = 1000 then 'CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE'
                                                                                                        else 'CANCEL_FROM_TRIAL'
                                                                                                    end
                                                                    when prev_mrr is null then case
                                                                                                   when history_rule = 1000 then 'CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE'
                                                                                                   else 'CANCEL_FROM_UNKNOWN'
                                                                                               end
                                                                    when prev_mrr = 0 then case
                                                                                               when history_rule = 1000 then 'CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE'
                                                                                               else 'CANCEL_FROM_FREE'
                                                                                           end
                                                                    else case
                                                                             when history_rule = 1000 then 'CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE'
                                                                             else 'CANCEL_FROM_PAID'
                                                                         end
                                                                end
                   end
          end as mrr_sub_status,
          case
              when prev_mrr is not null then abs(mrr - prev_mrr)
              else mrr
          end as mrr_diff
   from
     (select histories.data_source_id,
             histories.business_entity_id,
             histories.subscription_id,
             histories.currency_code,
             histories.status,
             histories.period_start,
             histories.period_end,
             histories.history_rule,
             calendars.cal_date as cal_date,
             calendars.exchange_rate,
             histories.mrr as mrr,
             lag(histories.mrr) over (partition by histories.subscription_id,
                                                   histories.data_source_id
                                      order by calendars.cal_date,
                                               histories.business_entity_id,
                                               histories.subscription_id,
                                               histories.status,
                                               histories.history_rule) as prev_mrr,
                                     lag(histories.status) over (partition by histories.subscription_id,
                                                                              histories.data_source_id
                                                                 order by calendars.cal_date,
                                                                          histories.business_entity_id,
                                                                          histories.subscription_id,
                                                                          histories.status,
                                                                          histories.history_rule) as prev_status,
                                                                lag(histories.subscription_id) over (partition by histories.subscription_id,
                                                                                                                  histories.data_source_id
                                                                                                     order by calendars.cal_date,
                                                                                                              histories.business_entity_id,
                                                                                                              histories.subscription_id,
                                                                                                              histories.status,
                                                                                                              histories.history_rule) as prev_subscription_id,
                                                                                                    histories.cancel_reason
      from (
              (select subscription_histories_part.data_source_id,
                      subscription_histories_part.business_entity_id,
                      subscription_histories_part.subscription_id,
                      subscription_histories_part.currency_code,
                      subscription_histories_part.status,
                      subscription_histories_part.history_rule,
                      period_start,
                      period_end,
                      subscription_histories_part.mrr + GREATEST(subscription_histories_part.non_recurring_mrr, 0) as mrr,
                      case
                          when (datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) < '2022-12-01 00:00:00' then '2022-12-30 23:59:59'
                          else (date_trunc('month', datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) + interval '1' month)
                      end as cal_date,
                      subscription_histories_part.cancel_reason
               from subscription_histories_part
               where subscription_histories_part.is_cmrr = false
                 and subscription_histories_part.data_source_id = 750
                 and subscription_histories_part.period_end >= '2022-11-01 07:59:59'
                 and subscription_histories_part.period_start <= '2023-04-07 07:07:55'
                 and (date_trunc('month', ((datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')))) <> (date_trunc('month', (datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) + interval '1' second))
                      or (datetime(datetime(cast('2022-11-06 23:07:55' as timestamp), 'UTC'), 'America/Los_Angeles')) between subscription_histories_part.period_start and subscription_histories_part.period_end)
                 and subscription_histories_part.currency_code is not null )) histories
      inner join (
                    (select case
                                when date_trunc('month', cal_date) = date_trunc('month', '2022-11-06 23:07:55') then date_trunc('month', '2022-11-06 23:07:55') + interval '1' month
                                else cal_date
                            end as cal_date,
                            date_trunc('month', cal_date) cal_date_1,
                            1.0 as exchange_rate
                     from monthly_calendars
                     where cal_date between '2022-11-01 00:00:00' and '2023-04-30 23:59:59' )) calendars on cast(cast(histories.cal_date as timestamp) as date) = cast(cast(calendars.cal_date as timestamp) as date)) T1),
     monthly_exr_calendars as
  (select t1.cal_date,
          t1.currency_code,
          (t2.exchange_rate / t1.exchange_rate) ""exchange_rate""
   from monthly_exr_calendars t1
   inner join monthly_exr_calendars t2 on t2.currency_code = 'USD'
   and t1.cal_date = t2.cal_date
   where T1.cal_date between '2022-12-01 00:00:00' and '2023-04-30 23:59:59'
   order by t1.cal_date)
select date_trunc('month', monthly_subscription_histories_part.""cal_date"") ""MONTH AND YEAR"",
       sum (case
                when monthly_subscription_histories_part.""mrr_sub_status"" in('CANCEL_FROM_PAID',
                                                                             'CANCEL_FROM_PAUSE') then ((monthly_subscription_histories_part.""mrr_diff"") * monthly_exr_calendars.exchange_rate)
            end) ""CANCEL FROM PAID""
from monthly_subscription_histories_part
inner join monthly_exr_calendars on /* monthly_exr_calendars.""cal_date"" = monthly_subscription_histories_part.""cal_date""
   and */ monthly_exr_calendars.""currency_code"" = monthly_subscription_histories_part.""currency_code""
where (monthly_subscription_histories_part.data_source_id = 750)
  and (monthly_subscription_histories_part.""currency_code"" is not null)
  and (monthly_subscription_histories_part.""mrr_sub_status"" in('CANCEL_FROM_PAID',
                                                               'CANCEL_FROM_PAUSE'))
  and (case
           when monthly_subscription_histories_part.""status"" = 'CANCELLED' then case
                                                                                    when monthly_subscription_histories_part.""cancel_reason"" in('line-bPt40',
                                                                                                                                                'line-HKr71',
                                                                                                                                                'line-LRh52',
                                                                                                                                                'line-nbl28',
                                                                                                                                                'line-SeR94') then 'Involuntary'
                                                                                    else 'Voluntary'
                                                                                end
           else null
       end = 'Involuntary')
  and date_trunc('month', monthly_subscription_histories_part.""cal_date"") between '2022-11-01 00:00:00' and '2023-04-30 23:59:59'
  and date_trunc('month', monthly_subscription_histories_part.""cal_date"") >= '2018-12-01 00:00:00'
group by 1
order by 1 asc","['subscription_histories_part', 'monthly_calendars']"
1363964,"-- RS4
with quarterly_subscription_histories as (SELECT cal_date,
          id,
          data_source_id,
          currency_code,
          mrr,
          status,
          cancel_reason,
          period_start,
          period_end,
          discount,
          customer_handle,
          subscription_handle,
          primary_product_handle,
          subscription_id,
          CASE
              WHEN prev_subscription_id IS NULL THEN CASE
                                                         WHEN mrr>0 THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                                         WHEN status = 'CANCELLED' THEN CASE
                                                                                            WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('CONTRACTION' as varchar)
                                                                                        END
                                                         WHEN mrr=0 THEN cast('NA' as varchar)
                                                     END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status IN ('ACTIVE',
                                                                   'TRIAL') THEN CASE
                                                                                     WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('NEW' as varchar)
                                                                                 END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('NA' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'ACTIVE' THEN cast('EXPANSION' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              ELSE CASE
                       WHEN prev_status=status THEN CASE
                                                        WHEN status = 'CANCELLED'
                                                             OR status = 'TRIAL'
                                                             OR prev_mrr = mrr THEN 'NA'
                                                        WHEN prev_mrr > mrr THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CONTRACTION' as varchar)
                                                                                 END
                                                        ELSE cast('EXPANSION' as varchar)
                                                    END
                       ELSE CASE
                                WHEN prev_mrr > mrr THEN CASE
                                                             WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                             ELSE cast('CONTRACTION' as varchar)
                                                         END
                                WHEN prev_mrr = mrr THEN cast('NA' as varchar)
                                ELSE CASE
                                         WHEN prev_status = 'CANCELLED'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN date_trunc('quarter',activated_at) = date_trunc('quarter',period_start) THEN CASE
WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
ELSE cast('NEW' as varchar)
END
ELSE cast('EXPANSION' as varchar)
                                                                         END
                                         WHEN prev_status = 'TRIAL'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                     END
                            END
                   END
          END AS mrr_status,
          CASE
              WHEN (prev_subscription_id IS NULL
                    AND status = 'ACTIVE')
                   OR (prev_status = 'TRIAL'
                       AND status = 'ACTIVE') THEN CASE
                                                       WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                       ELSE cast('NEW' as varchar)
                                                   END
              WHEN status = 'ACTIVE'
                   AND prev_status = 'CANCELLED' THEN CASE
                                                          WHEN date_trunc('quarter',activated_at) = date_trunc('quarter',period_start) THEN CASE
                                                                                                                                        WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                                                        ELSE cast('NEW' as varchar)
                                                                                                                                    END
                                                          ELSE cast('REACTIVE' as varchar)
                                                      END
              WHEN status = 'TRIAL'
                   AND prev_status = 'ACTIVE' THEN cast('ACTIVE_TO_TRIAL' as varchar)
              WHEN prev_status = status THEN CASE
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr = 0
                                                      AND mrr > 0 THEN cast('FREE_TO_PAID' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr > prev_mrr THEN cast('UPGRADE' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr < prev_mrr THEN cast('DOWNGRADE' as varchar)
                                             END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status = 'TRIAL' THEN CASE
                                                                                  WHEN history_rule = 900 THEN cast('NEW_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                  ELSE cast('NEW_TRIAL' as varchar)
                                                                              END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_FUTURE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN CASE
                                                                                                         WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                         ELSE cast('NEW' as varchar)
                                                                                                     END
                                                                                   ELSE CASE
                                                                                            WHEN history_rule = 900 THEN cast('NEW_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('NEW_FREE' as varchar)
                                                                                        END
                                                                               END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('ACTIVE_TO_FUTURE' as varchar)
                                                                                   ELSE cast('FREE_TO_FUTURE' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'FUTURE' THEN cast('PAUSE_TO_FUTURE' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_PAUSE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN cast('PAUSE_TO_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_TO_FREE' as varchar)
                                                                               END
                                                   WHEN status = 'TRIAL' THEN cast('PAUSE_TO_TRIAL' as varchar)
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('PAUSE_FROM_FUTURE' as varchar)
                                              WHEN prev_status = 'CANCELLED' THEN cast('PAUSE_FROM_CANCEL' as varchar)
                                              WHEN prev_status = 'TRIAL' THEN cast('PAUSE_FROM_TRIAL' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('PAUSE_FROM_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_FROM_FREE' as varchar)
                                                                               END
                                              ELSE cast('PAUSE_FROM_UNKNOWN' as varchar)
                                          END
              ELSE CASE
                       WHEN status = 'CANCELLED' THEN CASE
                                                          WHEN prev_status = 'TRIAL' THEN CASE
                                                                                              WHEN history_rule = 1000 THEN cast('CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                              ELSE cast('CANCEL_FROM_TRIAL' as varchar)
                                                                                          END
                                                          WHEN prev_mrr IS NULL THEN CASE
                                                                                         WHEN history_rule = 1000 THEN cast('CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE' as varchar)
                                                                                         ELSE cast('CANCEL_FROM_UNKNOWN' as varchar)
                                                                                     END
                                                          WHEN prev_mrr = 0 THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CANCEL_FROM_FREE' as varchar)
                                                                                 END
                                                          ELSE CASE
                                                                   WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE' as varchar)
                                                                   ELSE cast('CANCEL_FROM_PAID' as varchar)
                                                               END
                                                      END
                   END
          END AS mrr_sub_status,
          CASE
              WHEN prev_mrr IS NOT NULL THEN abs(mrr-prev_mrr)
              ELSE mrr
          END AS mrr_diff ,
          CASE
              WHEN prev_mrr IS NULL
                   OR mrr IS NULL THEN 0
              WHEN mrr>prev_mrr THEN prev_mrr
              ELSE mrr
          END AS mrr_fluctuation,
          primary_product_id,
          primary_product_group,
          primary_product_mrr,
          line_item_qty ,
          prev_product_id,
          prev_product_group,
          prev_product_mrr ,
          'America/New_York' AS timezone ,
          CASE
              WHEN prev_mrr > 0 THEN (((mrr - prev_mrr) * 1.0) / prev_mrr) * 100
          END AS mrr_diff_rate,
          CASE
              WHEN prev_mrr IS NOT NULL THEN mrr-prev_mrr
              ELSE mrr
          END AS mrr_diff_signed
   FROM
     (SELECT subscriptions.handle AS subscription_handle,
             products.handle AS primary_product_handle,
             subscriptions.customer_handle AS customer_handle,
             subscription_histories.id AS id,
             subscription_histories.data_source_id AS data_source_id,
             subscription_histories.currency_code AS currency_code,
             subscription_histories.status AS status,
             subscription_histories.cancel_reason AS cancel_reason,
             (subscription_histories.period_start) AS period_start,
             (subscription_histories.period_end) AS period_end,
             subscription_histories.is_cmrr,
             subscription_histories.history_rule AS history_rule,
             subscription_histories.discount AS discount,
             subscription_histories.subscription_id AS subscription_id,
             daily_calendars.cal_date AS cal_date,
             subscription_histories.mrr + GREATEST(subscription_histories.discount,0) AS mrr,
             lag(subscription_histories.mrr + GREATEST(subscription_histories.discount,0)) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                                                                       ORDER BY daily_calendars.cal_date) AS prev_mrr,
             lag(subscription_histories.status) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                            ORDER BY daily_calendars.cal_date) AS prev_status,
             lag(subscription_histories.history_rule) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                  ORDER BY daily_calendars.cal_date) AS prev_history_rule,
             lag(subscription_histories.discount) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                              ORDER BY daily_calendars.cal_date) AS prev_discount,
             lag(subscription_histories.subscription_id) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                     ORDER BY daily_calendars.cal_date) AS prev_subscription_id,
             (subscriptions.activated_at) AS activated_at,
             products.handle AS primary_product_id,
             products.product_group AS primary_product_group,
             LAG(products.handle) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                               ORDER BY daily_calendars.cal_date) AS prev_product_id,
             LAG(products.product_group) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                      ORDER BY daily_calendars.cal_date) AS prev_product_group,
             subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0) AS primary_product_mrr,
             LAG(subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0)) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id ORDER BY daily_calendars.cal_date) AS prev_product_mrr,
             subscription_component_histories.quantity AS line_item_qty
FROM ""subscription_histories""
INNER JOIN ""daily_calendars"" 
ON date_trunc('second',daily_calendars.cal_date) BETWEEN 
subscription_histories.period_start AND subscription_histories.period_end
AND date_trunc('quarter',cast('2020-01-02 00:00:00' as timestamp) )>date_trunc('quarter',daily_calendars.cal_date)
OR (DATE_TRUNC('quarter',(cast('2020-01-02 00:00:00' as timestamp)) )=DATE_TRUNC('quarter',daily_calendars.cal_date)
AND (cast('2020-06-02 00:00:00' as timestamp)) BETWEEN subscription_histories.period_start
AND 
subscription_histories.period_end)
INNER JOIN subscriptions ON subscriptions.id=subscription_histories.subscription_id
AND subscriptions.data_source_id=subscription_histories.data_source_id
INNER JOIN subscription_component_histories ON subscription_histories.id=subscription_component_histories.subscription_history_id
AND subscription_histories.data_source_id=subscription_component_histories.data_source_id
INNER JOIN products ON products.id=subscription_component_histories.product_id
AND products.product_type='PLAN'
AND products.data_source_id=subscription_component_histories.data_source_id
WHERE
subscription_histories.data_source_id IN (798, 751, 791)
AND subscriptions.data_source_id IN (798, 751, 791)
AND subscription_component_histories.data_source_id IN (798, 751, 791)
AND products.data_source_id IN(798, 751, 791))
)

SELECT DATE_TRUNC('quarter',T1.cal_date)        ""QUARTER AND YEAR"",
           (ROUND(1 / NULLIF(
                        (((COUNT(
                                CASE 
                                        WHEN T1.mrr_sub_status = 'CANCEL_FROM_PAID'
                                                THEN T1.mrr_sub_status
                                END) * 1.0 / NULLIF(
                                                                LAG(
                                                                        COUNT (
                                                                                CASE 
                                                                                        WHEN T1.status = 'ACTIVE' AND T1.mrr > 0 
                                                                                                THEN T1.status
                                                                                END
                                                                        )
                                                                )
                                                                OVER(
                                                                        ORDER BY DATE_TRUNC('quarter',T1.cal_date) ASC
                                                                ),0
                                                        )
                  ) * 100 + (
                                        LAG(
                                                COUNT(
                                                        CASE 
                                                                WHEN T1.mrr_sub_status = 'CANCEL_FROM_PAID'
                                                                        THEN T1.mrr_sub_status
                                                        END
                                                ),1
                                        )
                                        OVER(
                                                ORDER BY DATE_TRUNC('quarter',T1.cal_date) ASC
                                        ) * 1.0 / NULLIF(
                                                                        LAG(
                                                                                COUNT(
                                                                                        CASE 
                                                                                                WHEN T1.status = 'ACTIVE' AND T1.mrr > 0 
                                                                                                        THEN T1.status
                                                                                        END
                                                                                ),2
                                                                        )
                                                                        OVER(
                                                                                ORDER BY DATE_TRUNC('quarter',T1.cal_date) ASC
                                                                        ),0
                                                                )
                                    ) * 100 + (
                                                LAG(
                                                        COUNT(
                                                                CASE
                                                                        WHEN T1.mrr_sub_status = 'CANCEL_FROM_PAID'
                                                                                THEN T1.mrr_sub_status
                                                                END
                                                        ),2
                                                )
                                                OVER(
                                                        ORDER BY DATE_TRUNC('quarter',T1.cal_date) ASC
                                                ) * 1.0 / NULLIF(
                                                                        LAG(
                                                                                COUNT(
                                                                                        CASE 
                                                                                                WHEN T1.status = 'ACTIVE' AND T1.mrr > 0 
                                                                                                        THEN T1.status
                                                                                        END
                                                                                ),3
                                                                        )
                                                                        OVER(
                                                                                ORDER BY DATE_TRUNC('quarter',T1.cal_date) ASC
                                                                        ),0
                                                                )
                                        ) * 100 
                        ) * 1.0 /3 ),0) * 100 ) * AVG (
                                                                                CASE 
                                                                                        WHEN T1.status = 'ACTIVE' AND T1.mrr > 0
                                                                                                THEN T1.mrr
                                                                                END
                                                                        ) * 3 ) ""PAID LTV Q""
FROM quarterly_subscription_histories T1
WHERE ( T1.data_source_id = 768 ) 
                AND (
                        DATE_TRUNC('quarter',T1.cal_date) <> 
                  DATE_TRUNC('quarter',DATETIME(DATETIME(CAST('2020-03-19 17:42:50' as  TIMESTAMP),'UTC'),'Asia/Kolkata'))
                )
                AND DATE_TRUNC('quarter', T1.cal_date) BETWEEN CAST('2020-01-01 00:00:00' AS TIMESTAMP) AND                    CAST('2020-06-30 23:59:59' AS TIMESTAMP)
GROUP BY DATE_TRUNC('quarter',T1.cal_date)
ORDER BY DATE_TRUNC('quarter',T1.cal_date) ASC","['subscription_component_histories', 'subscriptions', 'products', 'subscription_histories', 'daily_calendars']"
1299970,"with cte as (select '2024-08-11 23:00:00'::timestamp as t1
union all
select '2024-08-12 00:00:00'::timestamp
union all
select '2024-08-13 01:00:00'::timestamp)
select date(convert_timezone('America/Los_Angeles', t1)),cast(convert_timezone('America/Los_Angeles', t1) as date) from cte order by 1",[]
1436025,"select * from ""glue"".""chargebee_prod_v2_1gb"".""coupons"" limit 10",['chargebee_prod_v2_1gb.coupons']
1301429,"select date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) ""MONTH AND YEAR OF INVOICE DATE - INSTA"",
       SUM(((T2.""total""))) ""TOTAL BILLING""
from invoices_part T2

inner join daily_exr_calendars on
daily_exr_calendars.""currency_code"" = T2.""currency_code""

where (T2.data_source_id = 751)
  and (date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) <> date_trunc('month', cast('2023-11-06 22:47:23' as timestamp)))
  and (T2.""status"" in('NOT_PAID',
                      'PAID',
                      'PAYMENT_DUE',
                      'POSTED'))
  and (T2.""currency_code"" is not null)
  and T2.""date"" between '2022-09-01 07:00:00' and '2023-11-01 06:59:59'
  and T2.""date"" >= '2018-12-01 00:00:00'
group by 1
order by 1 asc","['daily_exr_calendars', 'invoices_part']"
1363963,"-- RS3
with monthly_subscription_histories as (SELECT cal_date,
          id,
          data_source_id,
          currency_code,
          mrr,
          status,
          cancel_reason,
          period_start,
          period_end,
          discount,
          customer_handle,
          subscription_handle,
          primary_product_handle,
          subscription_id,
          CASE
              WHEN prev_subscription_id IS NULL THEN CASE
                                                         WHEN mrr>0 THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                                         WHEN status = 'CANCELLED' THEN CASE
                                                                                            WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('CONTRACTION' as varchar)
                                                                                        END
                                                         WHEN mrr=0 THEN cast('NA' as varchar)
                                                     END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status IN ('ACTIVE',
                                                                   'TRIAL') THEN CASE
                                                                                     WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('NEW' as varchar)
                                                                                 END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('NA' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'ACTIVE' THEN cast('EXPANSION' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              ELSE CASE
                       WHEN prev_status=status THEN CASE
                                                        WHEN status = 'CANCELLED'
                                                             OR status = 'TRIAL'
                                                             OR prev_mrr = mrr THEN 'NA'
                                                        WHEN prev_mrr > mrr THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CONTRACTION' as varchar)
                                                                                 END
                                                        ELSE cast('EXPANSION' as varchar)
                                                    END
                       ELSE CASE
                                WHEN prev_mrr > mrr THEN CASE
                                                             WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                             ELSE cast('CONTRACTION' as varchar)
                                                         END
                                WHEN prev_mrr = mrr THEN cast('NA' as varchar)
                                ELSE CASE
                                         WHEN prev_status = 'CANCELLED'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN date_trunc('month',activated_at) = date_trunc('month',period_start) THEN CASE
WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
ELSE cast('NEW' as varchar)
END
ELSE cast('EXPANSION' as varchar)
                                                                         END
                                         WHEN prev_status = 'TRIAL'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                     END
                            END
                   END
          END AS mrr_status,
          CASE
              WHEN (prev_subscription_id IS NULL
                    AND status = 'ACTIVE')
                   OR (prev_status = 'TRIAL'
                       AND status = 'ACTIVE') THEN CASE
                                                       WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                       ELSE cast('NEW' as varchar)
                                                   END
              WHEN status = 'ACTIVE'
                   AND prev_status = 'CANCELLED' THEN CASE
                                                          WHEN date_trunc('month',activated_at) = date_trunc('month',period_start) THEN CASE
                                                                                                                                        WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                                                        ELSE cast('NEW' as varchar)
                                                                                                                                    END
                                                          ELSE cast('REACTIVE' as varchar)
                                                      END
              WHEN status = 'TRIAL'
                   AND prev_status = 'ACTIVE' THEN cast('ACTIVE_TO_TRIAL' as varchar)
              WHEN prev_status = status THEN CASE
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr = 0
                                                      AND mrr > 0 THEN cast('FREE_TO_PAID' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr > prev_mrr THEN cast('UPGRADE' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr < prev_mrr THEN cast('DOWNGRADE' as varchar)
                                             END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status = 'TRIAL' THEN CASE
                                                                                  WHEN history_rule = 900 THEN cast('NEW_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                  ELSE cast('NEW_TRIAL' as varchar)
                                                                              END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_FUTURE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN CASE
                                                                                                         WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                         ELSE cast('NEW' as varchar)
                                                                                                     END
                                                                                   ELSE CASE
                                                                                            WHEN history_rule = 900 THEN cast('NEW_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('NEW_FREE' as varchar)
                                                                                        END
                                                                               END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('ACTIVE_TO_FUTURE' as varchar)
                                                                                   ELSE cast('FREE_TO_FUTURE' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'FUTURE' THEN cast('PAUSE_TO_FUTURE' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_PAUSE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN cast('PAUSE_TO_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_TO_FREE' as varchar)
                                                                               END
                                                   WHEN status = 'TRIAL' THEN cast('PAUSE_TO_TRIAL' as varchar)
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('PAUSE_FROM_FUTURE' as varchar)
                                              WHEN prev_status = 'CANCELLED' THEN cast('PAUSE_FROM_CANCEL' as varchar)
                                              WHEN prev_status = 'TRIAL' THEN cast('PAUSE_FROM_TRIAL' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('PAUSE_FROM_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_FROM_FREE' as varchar)
                                                                               END
                                              ELSE cast('PAUSE_FROM_UNKNOWN' as varchar)
                                          END
              ELSE CASE
                       WHEN status = 'CANCELLED' THEN CASE
                                                          WHEN prev_status = 'TRIAL' THEN CASE
                                                                                              WHEN history_rule = 1000 THEN cast('CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                              ELSE cast('CANCEL_FROM_TRIAL' as varchar)
                                                                                          END
                                                          WHEN prev_mrr IS NULL THEN CASE
                                                                                         WHEN history_rule = 1000 THEN cast('CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE' as varchar)
                                                                                         ELSE cast('CANCEL_FROM_UNKNOWN' as varchar)
                                                                                     END
                                                          WHEN prev_mrr = 0 THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CANCEL_FROM_FREE' as varchar)
                                                                                 END
                                                          ELSE CASE
                                                                   WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE' as varchar)
                                                                   ELSE cast('CANCEL_FROM_PAID' as varchar)
                                                               END
                                                      END
                   END
          END AS mrr_sub_status,
          CASE
              WHEN prev_mrr IS NOT NULL THEN abs(mrr-prev_mrr)
              ELSE mrr
          END AS mrr_diff ,
          CASE
              WHEN prev_mrr IS NULL
                   OR mrr IS NULL THEN 0
              WHEN mrr>prev_mrr THEN prev_mrr
              ELSE mrr
          END AS mrr_fluctuation,
          primary_product_id,
          primary_product_group,
          primary_product_mrr,
          line_item_qty ,
          prev_product_id,
          prev_product_group,
          prev_product_mrr ,
          'America/New_York' AS timezone ,
          CASE
              WHEN prev_mrr > 0 THEN (((mrr - prev_mrr) * 1.0) / prev_mrr) * 100
          END AS mrr_diff_rate,
          CASE
              WHEN prev_mrr IS NOT NULL THEN mrr-prev_mrr
              ELSE mrr
          END AS mrr_diff_signed
   FROM
     (SELECT subscriptions.handle AS subscription_handle,
             products.handle AS primary_product_handle,
             subscriptions.customer_handle AS customer_handle,
             subscription_histories.id AS id,
             subscription_histories.data_source_id AS data_source_id,
             subscription_histories.currency_code AS currency_code,
             subscription_histories.status AS status,
             subscription_histories.cancel_reason AS cancel_reason,
             (subscription_histories.period_start) AS period_start,
             (subscription_histories.period_end) AS period_end,
             subscription_histories.is_cmrr,
             subscription_histories.history_rule AS history_rule,
             subscription_histories.discount AS discount,
             subscription_histories.subscription_id AS subscription_id,
             daily_calendars.cal_date AS cal_date,
             subscription_histories.mrr + GREATEST(subscription_histories.discount,0) AS mrr,
             lag(subscription_histories.mrr + GREATEST(subscription_histories.discount,0)) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                                                                       ORDER BY daily_calendars.cal_date) AS prev_mrr,
             lag(subscription_histories.status) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                            ORDER BY daily_calendars.cal_date) AS prev_status,
             lag(subscription_histories.history_rule) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                  ORDER BY daily_calendars.cal_date) AS prev_history_rule,
             lag(subscription_histories.discount) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                              ORDER BY daily_calendars.cal_date) AS prev_discount,
             lag(subscription_histories.subscription_id) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                     ORDER BY daily_calendars.cal_date) AS prev_subscription_id,
             (subscriptions.activated_at) AS activated_at,
             products.handle AS primary_product_id,
             products.product_group AS primary_product_group,
             LAG(products.handle) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                               ORDER BY daily_calendars.cal_date) AS prev_product_id,
             LAG(products.product_group) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                      ORDER BY daily_calendars.cal_date) AS prev_product_group,
             subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0) AS primary_product_mrr,
             LAG(subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0)) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id ORDER BY daily_calendars.cal_date) AS prev_product_mrr,
             subscription_component_histories.quantity AS line_item_qty
FROM ""subscription_histories""
INNER JOIN ""daily_calendars"" 
ON date_trunc('second',daily_calendars.cal_date) BETWEEN 
subscription_histories.period_start AND subscription_histories.period_end
AND date_trunc('month',cast('2020-01-02 00:00:00' as timestamp) )>date_trunc('month',daily_calendars.cal_date)
OR (DATE_TRUNC('month',(cast('2020-01-02 00:00:00' as timestamp)) )=DATE_TRUNC('month',daily_calendars.cal_date)
AND (cast('2020-06-02 00:00:00' as timestamp)) BETWEEN subscription_histories.period_start
AND 
subscription_histories.period_end)
INNER JOIN subscriptions ON subscriptions.id=subscription_histories.subscription_id
AND subscriptions.data_source_id=subscription_histories.data_source_id
INNER JOIN subscription_component_histories ON subscription_histories.id=subscription_component_histories.subscription_history_id
AND subscription_histories.data_source_id=subscription_component_histories.data_source_id
INNER JOIN products ON products.id=subscription_component_histories.product_id
AND products.product_type='PLAN'
AND products.data_source_id=subscription_component_histories.data_source_id
WHERE
subscription_histories.data_source_id IN (798, 751, 791)
AND subscriptions.data_source_id IN (798, 751, 791)
AND subscription_component_histories.data_source_id IN (798, 751, 791)
AND products.data_source_id IN(798, 751, 791))
)

SELECT DATE_TRUNC('month',T1.cal_date) ""MONTH AND YEAR"",
                T2.handle        ""handle"",
                COUNT(
                        CASE 
                                WHEN T1.mrr_sub_status = 'CANCEL_FROM_PAID' 
                                        THEN T1.mrr_sub_status
                        END
                )        ""PAID CHURN""
FROM monthly_subscription_histories T1
        INNER JOIN products T2
                ON T2.handle = T1.primary_product_id
                        AND T2.data_source_id = T1.data_source_id
WHERE ( T1.data_source_id = 768)
GROUP BY DATE_TRUNC('month',T1.cal_date),
                T2.handle
ORDER BY DATE_TRUNC('month',T1.cal_date) ASC, T2.handle ASC","['subscription_component_histories', 'subscriptions', 'products', 'subscription_histories', 'daily_calendars']"
1300124,"select distinct case when created_at >= '2023-03-12 00:00:00' then date((convert_timezone('America/Los_Angeles', created_at)))
         when created_at <='2023-03-13 00:00:00' then cast((convert_timezone('America/Los_Angeles', created_at))as date) else null end
        from customers where created_at >= '2023-03-12 00:00:00' and created_at <='2023-03-13 00:00:00' order by 1 limit 100",['customers']
1363956,"-- LRQ3
select * 
from 
  (
    SELECT 
      date_trunc('month', T2.""cal_date"") ""MONTH AND YEAR"", 
      T3.""business_type"" ""Customers Business Type"", 
      T1.""handle"" ""Subscriptions Id"", 
      T3.""company"" ""Company Name"", 
      T3.""email"" ""Customers Email"", 
      T3.""handle"" ""Customers Id"", 
      datetime(datetime(T1.""activated_at"", 'UTC'), 'Europe/Amsterdam') ""Activated At"", 
      T3.""last_name"" ""Customers Last Name"", 
      T3.""first_name"" ""Customers First Name""
    FROM 
      (
        Select 
          T1.*, 
          CASE WHEN prev_subscription_id is null then case when mrr > 0 then CASE WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE' ELSE 'NEW' END WHEN status = 'CANCELLED' THEN CASE WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE' ELSE 'CONTRACTION' END WHEN mrr = 0 THEN 'NA' End WHEN prev_status = 'FUTURE' THEN CASE WHEN status IN ('ACTIVE', 'TRIAL') THEN CASE WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE' ELSE 'NEW' END WHEN status = 'CANCELLED' THEN CASE WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE' ELSE 'CONTRACTION' END ELSE 'NA' END WHEN status = 'FUTURE' THEN CASE WHEN prev_status = 'FUTURE' THEN 'NA' WHEN prev_status = 'ACTIVE' THEN CASE WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE' ELSE 'CONTRACTION' END ELSE 'FUTURE' END WHEN status = 'PAUSED' THEN CASE WHEN prev_status = 'ACTIVE' THEN CASE WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE' ELSE 'CONTRACTION' END ELSE 'NA' END WHEN prev_status = 'PAUSED' THEN CASE WHEN status = 'ACTIVE' THEN 'EXPANSION' WHEN status = 'CANCELLED' THEN CASE WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE' ELSE 'CONTRACTION' END ELSE 'NA' END ELSE CASE WHEN prev_status = status THEN CASE WHEN status = 'CANCELLED' 
          OR status = 'TRIAL' 
          OR prev_mrr = mrr THEN 'NA' when prev_mrr > mrr THEN CASE WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE' ELSE 'CONTRACTION' END ELSE 'EXPANSION' END ELSE CASE WHEN prev_mrr > mrr THEN CASE WHEN history_rule = 1000 THEN 'CONTRACTION_FOR_CURRENCY_CHANGE' ELSE 'CONTRACTION' END WHEN prev_mrr = mrr THEN 'NA' ELSE CASE WHEN prev_status = 'CANCELLED' 
          AND mrr > 0 
          AND status = 'ACTIVE' THEN CASE when date_trunc('month', activated_at) = date_trunc('month', period_start) then CASE WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE' ELSE 'NEW' END else 'EXPANSION' END WHEN prev_status = 'TRIAL' 
          AND mrr > 0 
          AND status = 'ACTIVE' THEN CASE WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE' ELSE 'NEW' END END END END END as mrr_status, 
          CASE WHEN (
            prev_subscription_id IS NULL 
            AND status = 'ACTIVE'
          ) 
          OR (
            prev_status = 'TRIAL' 
            AND status = 'ACTIVE'
          ) THEN CASE WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE' ELSE 'NEW' END when status = 'ACTIVE' 
          AND prev_status = 'CANCELLED' then case when date_trunc('month', activated_at) = date_trunc('month', period_start) then CASE WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE' ELSE 'NEW' END else 'REACTIVE' end WHEN status = 'TRIAL' 
          AND prev_status = 'ACTIVE' THEN 'ACTIVE_TO_TRIAL' WHEN prev_status = status THEN CASE WHEN status = 'ACTIVE' 
          AND prev_mrr = 0 
          AND mrr > 0 THEN 'FREE_TO_PAID' WHEN status = 'ACTIVE' 
          AND prev_mrr > 0 
          AND mrr > prev_mrr THEN 'UPGRADE' WHEN status = 'ACTIVE' 
          AND prev_mrr > 0 
          AND mrr < prev_mrr THEN 'DOWNGRADE' END WHEN prev_status = 'FUTURE' THEN CASE WHEN status = 'TRIAL' THEN CASE WHEN history_rule = 900 THEN 'NEW_TRIAL_FOR_CURRENCY_CHANGE' ELSE 'NEW_TRIAL' END WHEN status = 'CANCELLED' THEN CASE WHEN history_rule = 1000 THEN 'CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE' ELSE 'CANCEL_FROM_FUTURE' END WHEN status = 'ACTIVE' THEN CASE WHEN mrr > 0 THEN CASE WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE' ELSE 'NEW' END ELSE CASE WHEN history_rule = 900 THEN 'NEW_FREE_FOR_CURRENCY_CHANGE' ELSE 'NEW_FREE' END END ELSE 'NA' END WHEN status = 'FUTURE' THEN CASE WHEN prev_status = 'FUTURE' THEN 'NA' WHEN prev_status = 'ACTIVE' THEN CASE WHEN prev_mrr > 0 THEN 'ACTIVE_TO_FUTURE' ELSE 'FREE_TO_FUTURE' END ELSE 'FUTURE' END WHEN prev_status = 'PAUSED' THEN CASE WHEN status = 'FUTURE' THEN 'PAUSE_TO_FUTURE' WHEN status = 'CANCELLED' THEN CASE WHEN history_rule = 1000 THEN 'CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE' ELSE 'CANCEL_FROM_PAUSE' END WHEN status = 'ACTIVE' THEN CASE WHEN mrr > 0 THEN 'PAUSE_TO_PAID' ELSE 'PAUSE_TO_FREE' END WHEN status = 'TRIAL' THEN 'PAUSE_TO_TRIAL' ELSE 'NA' END WHEN status = 'PAUSED' THEN CASE WHEN prev_status = 'FUTURE' THEN 'PAUSE_FROM_FUTURE' WHEN prev_status = 'CANCELLED' THEN 'PAUSE_FROM_CANCEL' WHEN prev_status = 'TRIAL' THEN 'PAUSE_FROM_TRIAL' WHEN prev_status = 'ACTIVE' THEN CASE WHEN prev_mrr > 0 THEN 'PAUSE_FROM_PAID' ELSE 'PAUSE_FROM_FREE' END ELSE 'PAUSE_FROM_UNKNOWN' END ELSE CASE WHEN status = 'CANCELLED' THEN CASE WHEN prev_status = 'TRIAL' THEN CASE WHEN history_rule = 1000 THEN 'CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE' ELSE 'CANCEL_FROM_TRIAL' END WHEN prev_mrr IS NULL THEN CASE WHEN history_rule = 1000 THEN 'CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE' ELSE 'CANCEL_FROM_UNKNOWN' END WHEN prev_mrr = 0 THEN CASE WHEN history_rule = 1000 THEN 'CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE' ELSE 'CANCEL_FROM_FREE' END ELSE CASE WHEN history_rule = 1000 THEN 'CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE' ELSE 'CANCEL_FROM_PAID' END END END END as mrr_sub_status, 
          CASE WHEN prev_mrr is not null then abs(mrr - prev_mrr) ELSE mrr END as mrr_diff, 
          CASE WHEN prev_mrr is not null then mrr - prev_mrr ELSE mrr END as mrr_diff_signed, 
          case when prev_mrr > 0 then (
            (
              (mrr - prev_mrr) * 1.0
            ) / prev_mrr
          ) * 100 end as mrr_diff_rate, 
          CASE WHEN prev_mrr IS NULL 
          or mrr IS NULL THEN 0 WHEN mrr > prev_mrr THEN prev_mrr ELSE mrr END as mrr_fluctuation 
        from 
          (
            select 
              subscriptions.handle as subscription_handle, 
              subscriptions.customer_handle as customer_handle, 
              subscriptions.activated_at as activated_at,
              subscription_histories.id, 
              subscription_histories.data_source_id, 
              subscription_histories.currency_code, 
              subscription_histories.status, 
              subscription_histories.cancel_reason, 
              datetime(datetime(subscription_histories.period_start, 'UTC'), 'Europe/Amsterdam') as period_start,
              datetime(datetime(subscription_histories.period_end, 'UTC'), 'Europe/Amsterdam') as period_end,
              subscription_histories.is_cmrr, 
              subscription_histories.history_rule, 
              subscription_histories.discount, 
              subscription_histories.subscription_id, 
              monthly_calendars.cal_date as cal_date, 
              subscription_histories.mrr as mrr, 
              lag(subscription_histories.mrr) OVER(
                PARTITION BY subscription_histories.subscription_id, 
                subscription_histories.data_source_id 
                ORDER BY 
                  monthly_calendars.cal_date
              ) as prev_mrr, 
              lag(subscription_histories.status) OVER(
                PARTITION BY subscription_histories.subscription_id, 
                subscription_histories.data_source_id 
                ORDER BY 
                  monthly_calendars.cal_date
              ) as prev_status, 
              lag(
                subscription_histories.history_rule
              ) OVER(
                PARTITION BY subscription_histories.subscription_id, 
                subscription_histories.data_source_id 
                ORDER BY 
                  monthly_calendars.cal_date
              ) as prev_history_rule, 
              lag(
                subscription_histories.discount
              ) OVER(
                PARTITION BY subscription_histories.subscription_id, 
                subscription_histories.data_source_id 
                ORDER BY 
                  monthly_calendars.cal_date
              ) as prev_discount, 
              lag(
                subscription_histories.subscription_id
              ) OVER(
                PARTITION BY subscription_histories.subscription_id, 
                subscription_histories.data_source_id 
                ORDER BY 
                  monthly_calendars.cal_date
              ) as prev_subscription_id, 
              datetime(datetime(subscriptions.activated_at, 'UTC'), 'Europe/Amsterdam')
            from 
              subscription_histories 
              inner join monthly_calendars on date_trunc('month', datetime('2021-10-11 09:56:07', 'Europe/Amsterdam')) > date_trunc('month', monthly_calendars.cal_date) 
              or (
                DATE_TRUNC('month', datetime('2021-10-11 09:56:07', 'Europe/Amsterdam'))= DATE_TRUNC('month', monthly_calendars.cal_date) 
                and datetime('2021-10-11 09:56:07', 'Europe/Amsterdam') between datetime(datetime(subscription_histories.period_start, 'UTC'), 'Europe/Amsterdam')
                and datetime(datetime(subscription_histories.period_end, 'UTC'), 'Europe/Amsterdam')
              ) 
              inner join subscriptions on subscriptions.id = subscription_histories.subscription_id 
              and subscriptions.data_source_id = subscription_histories.data_source_id 
            where 
              subscription_histories.data_source_id in(760, 800, 796) 
              and subscriptions.data_source_id in(765, 789, 790) 
              AND monthly_calendars.cal_date BETWEEN '2020-04-01 00:00:00' 
              AND '2020-07-30 23:59:59'
          ) T1
      ) T2 
      INNER JOIN subscriptions T1 ON T1.""id"" = T2.""subscription_id"" 
      and T1.""data_source_id"" = T2.""data_source_id"" 
      INNER JOIN customers T3 ON T3.""handle"" = T2.""customer_handle"" 
      and T3.""data_source_id"" = T2.""data_source_id"" 
    WHERE 
      (
        T2.data_source_id in(760, 800, 796)
      ) 
      AND (
        date_trunc('month', T2.""cal_date"") = '2020-04-01 00:00:00'
      ) 
      AND (
        T2.""mrr_sub_status"" = 'CANCEL_FROM_PAID' 
        OR T2.""status"" = 'ACTIVE' 
        and T2.""mrr"" > 0
      ) 
      AND date_trunc('month', T2.""cal_date"") BETWEEN '2020-04-01 00:00:00' 
      AND '2020-07-30 23:59:59' 
      AND date_trunc('month', T2.""cal_date"") BETWEEN '2020-03-01 00:00:00' 
      AND '2020-06-30 23:59:59' 
    ORDER BY 
      date_trunc('month', T2.""cal_date"") ASC, 
      T3.""business_type"" ASC 
    LIMIT 
      1000
  ) T1 
where 
  T1.""MONTH AND YEAR"" BETWEEN '2020-04-01 00:00:00' 
  AND '2020-05-31 23:59:59'","['subscription_histories', 'subscriptions', 'customers', 'monthly_calendars']"
1301469,"select date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) ""MONTH AND YEAR OF INVOICE DATE - INSTA"",
       SUM(((T2.""total""))) ""TOTAL BILLING""
from invoices_part T2

inner join daily_exr_calendars on
daily_exr_calendars.""currency_code"" = T2.""currency_code""

where (T2.data_source_id = 751)
  and (date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) <> date_trunc('month', cast('2023-11-06 22:47:23' as timestamp)))
  and (T2.""status"" in('NOT_PAID',
                      'PAID',
                      'PAYMENT_DUE',
                      'POSTED'))
  and (T2.""currency_code"" is not null)
  and T2.""date"" between '2022-09-01 07:00:00' and '2023-11-01 06:59:59'
  and T2.""date"" >= '2018-12-01 00:00:00'
group by 1
order by 1 asc","['daily_exr_calendars', 'invoices_part']"
1299974,"with cte as (select '2024-08-11 23:00:00'::timestamp as t1
union all
select '2024-08-12 00:00:00'::timestamp
union all
select '2024-08-13 01:00:00'::timestamp)
select date(convert_timezone('Asia/Kolkata', t1)),cast(convert_timezone('Asia/Kolkata', t1) as date),date(convert_timezone('UTC','Asia/Kolkata', t1)) from cte order by 1",[]
1373101,"with monthly_subscription_histories_part as
  (select T1.*,
          case
              when prev_status = 'PAUSED' then case
                                                   when status = 'CANCELLED' then case
                                                                                      when history_rule = 1000 then 'CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE'
                                                                                      else 'CANCEL_FROM_PAUSE'
                                                                                  end
                                               end
              else case
                       when status = 'CANCELLED'
                            and prev_status != 'CANCELLED' then case
                                                                    when prev_status = 'TRIAL' then case
                                                                                                        when history_rule = 1000 then 'CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE'
                                                                                                        else 'CANCEL_FROM_TRIAL'
                                                                                                    end
                                                                    when prev_mrr is null then case
                                                                                                   when history_rule = 1000 then 'CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE'
                                                                                                   else 'CANCEL_FROM_UNKNOWN'
                                                                                               end
                                                                    when prev_mrr = 0 then case
                                                                                               when history_rule = 1000 then 'CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE'
                                                                                               else 'CANCEL_FROM_FREE'
                                                                                           end
                                                                    else case
                                                                             when history_rule = 1000 then 'CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE'
                                                                             else 'CANCEL_FROM_PAID'
                                                                         end
                                                                end
                   end
          end as mrr_sub_status,
          case
              when prev_mrr is not null then abs(mrr - prev_mrr)
              else mrr
          end as mrr_diff
   from
     (select histories.data_source_id,
             histories.business_entity_id,
             histories.subscription_id,
             histories.currency_code,
             histories.status,
             histories.period_start,
             histories.period_end,
             histories.history_rule,
             calendars.cal_date as cal_date,
             calendars.exchange_rate,
             histories.mrr as mrr,
             lag(histories.mrr) over (partition by histories.subscription_id,
                                                   histories.data_source_id
                                      order by calendars.cal_date,
                                               histories.business_entity_id,
                                               histories.subscription_id,
                                               histories.status,
                                               histories.history_rule) as prev_mrr,
                                     lag(histories.status) over (partition by histories.subscription_id,
                                                                              histories.data_source_id
                                                                 order by calendars.cal_date,
                                                                          histories.business_entity_id,
                                                                          histories.subscription_id,
                                                                          histories.status,
                                                                          histories.history_rule) as prev_status,
                                                                lag(histories.subscription_id) over (partition by histories.subscription_id,
                                                                                                                  histories.data_source_id
                                                                                                     order by calendars.cal_date,
                                                                                                              histories.business_entity_id,
                                                                                                              histories.subscription_id,
                                                                                                              histories.status,
                                                                                                              histories.history_rule) as prev_subscription_id,
                                                                                                    histories.cancel_reason
      from (
              (select subscription_histories_part.data_source_id,
                      subscription_histories_part.business_entity_id,
                      subscription_histories_part.subscription_id,
                      subscription_histories_part.currency_code,
                      subscription_histories_part.status,
                      subscription_histories_part.history_rule,
                      period_start,
                      period_end,
                      subscription_histories_part.mrr + GREATEST(subscription_histories_part.non_recurring_mrr, 0) as mrr,
                      case
                          when (datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) < '2022-12-01 00:00:00' then '2022-12-30 23:59:59'
                          else (date_trunc('month', datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) + interval '1' month)
                      end as cal_date,
                      subscription_histories_part.cancel_reason
               from subscription_histories_part
               where subscription_histories_part.is_cmrr = false
                 and subscription_histories_part.data_source_id = 750
                 and subscription_histories_part.period_end >= '2022-11-01 07:59:59'
                 and subscription_histories_part.period_start <= '2023-04-07 07:07:55'
                 and (date_trunc('month', ((datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')))) <> (date_trunc('month', (datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) + interval '1' second))
                      or (datetime(datetime(cast('2022-11-06 23:07:55' as timestamp), 'UTC'), 'America/Los_Angeles')) between subscription_histories_part.period_start and subscription_histories_part.period_end)
                 and subscription_histories_part.currency_code is not null )) histories
      inner join (
                    (select case
                                when date_trunc('month', cal_date) = date_trunc('month', '2022-11-06 23:07:55') then date_trunc('month', '2022-11-06 23:07:55') + interval '1' month
                                else cal_date
                            end as cal_date,
                            date_trunc('month', cal_date) cal_date_1,
                            1.0 as exchange_rate
                     from monthly_calendars
                     where cal_date between '2022-11-01 00:00:00' and '2023-04-30 23:59:59' )) calendars on cast(cast(histories.cal_date as timestamp) as date) = cast(cast(calendars.cal_date as timestamp) as date)) T1),
     monthly_exr_calendars as
  (select t1.cal_date,
          t1.currency_code,
          (t2.exchange_rate / t1.exchange_rate) ""exchange_rate""
   from monthly_exr_calendars t1
   inner join monthly_exr_calendars t2 on t2.currency_code = 'USD'
   and t1.cal_date = t2.cal_date
   where T1.cal_date between '2022-12-01 00:00:00' and '2023-04-30 23:59:59'
   order by t1.cal_date)
select date_trunc('month', monthly_subscription_histories_part.""cal_date"") ""MONTH AND YEAR"",
       sum (case
                when monthly_subscription_histories_part.""mrr_sub_status"" in('CANCEL_FROM_PAID',
                                                                             'CANCEL_FROM_PAUSE') then ((monthly_subscription_histories_part.""mrr_diff"") * monthly_exr_calendars.exchange_rate)
            end) ""CANCEL FROM PAID""
from monthly_subscription_histories_part
inner join monthly_exr_calendars on /* monthly_exr_calendars.""cal_date"" = monthly_subscription_histories_part.""cal_date""
   and */ monthly_exr_calendars.""currency_code"" = monthly_subscription_histories_part.""currency_code""
where (monthly_subscription_histories_part.data_source_id = 750)
  and (monthly_subscription_histories_part.""currency_code"" is not null)
  and (monthly_subscription_histories_part.""mrr_sub_status"" in('CANCEL_FROM_PAID',
                                                               'CANCEL_FROM_PAUSE'))
  and (case
           when monthly_subscription_histories_part.""status"" = 'CANCELLED' then case
                                                                                    when monthly_subscription_histories_part.""cancel_reason"" in('line-bPt40',
                                                                                                                                                'line-HKr71',
                                                                                                                                                'line-LRh52',
                                                                                                                                                'line-nbl28',
                                                                                                                                                'line-SeR94') then 'Involuntary'
                                                                                    else 'Voluntary'
                                                                                end
           else null
       end = 'Involuntary')
  and date_trunc('month', monthly_subscription_histories_part.""cal_date"") between '2022-11-01 00:00:00' and '2023-04-30 23:59:59'
  and date_trunc('month', monthly_subscription_histories_part.""cal_date"") >= '2018-12-01 00:00:00'
group by 1
order by 1 asc","['subscription_histories_part', 'monthly_calendars']"
1363958,"-- LRQ7
select 
  T4.""name"" ""Coupon Name"", 
  T4.""status"" ""Coupon Current Status"", 
  date_trunc(
    'month', 
      datetime(datetime(T3.""date"", 'UTC'), 'Pacific/Auckland')
  ) ""MONTH AND YEAR OF INVOICE DATE"", 
  T3.""handle"" ""Invoice Handle"", 
  (
    (T3.""total"")* T2.exchange_rate
  ) ""Invoice Amount"", 
  (
    (T4.""discount_amount"")* T2.exchange_rate
  ) ""Coupon Amount"", 
  T4.""duration_type"" ""Coupon Type"", 
  T1.""handle"" ""Invoice Subscription Id"", 
  T5.""handle"" ""Invoice Customer Id"" 
FROM 
  invoice_discounts T6 
  INNER JOIN invoices T3 ON T3.""id"" = cast(T6.""invoice_id"" as integer)
  and T3.""data_source_id"" = T6.""data_source_id"" 
  LEFT JOIN coupons T4 ON T4.""id"" = T6.""coupon_id"" 
  and T4.""data_source_id"" = T6.""data_source_id"" 
  INNER JOIN (
    select 
      t1.cal_date, 
      t1.currency_code, 
      (
        t2.exchange_rate / t1.exchange_rate
      ) ""exchange_rate"", 
      (
        t2.exchange_rate / t1.exchange_rate
      ) - lag(
        (
          t2.exchange_rate / t1.exchange_rate
        )
      ) over(
        partition by T1.""currency_code"" 
        order by 
          T1.""cal_date""
      ) ""currency_fluctuation"" 
    from 
      daily_exr_calendars t1 
      inner join daily_exr_calendars t2 on t2.currency_code = 'NZD' 
      and t1.cal_date = t2.cal_date 
    where 
      T1.cal_date BETWEEN '2020-01-01 10:00:00' 
      AND '2020-01-01 12:00:00'
      and date_trunc('month', T2.cal_date) = '2020-01-01 00:00:00'
  ) T2 ON DATE_TRUNC('day', T2.""cal_date"")= 
  datetime(DATE_TRUNC('day',T6.""invoice_date""), 'Pacific/Auckland') 
  and T2.""currency_code"" = T6.""currency_code"" 
  LEFT JOIN subscriptions T1 ON T1.""handle"" = T6.""subscription_handle"" 
  and T1.""data_source_id"" = T6.""data_source_id"" 
  INNER JOIN customers T5 ON T5.""id"" = T6.""customer_id"" 
  and T5.""data_source_id"" = T6.""data_source_id"" 
WHERE 
  (
    T6.data_source_id in(789, 790)
  ) 
  AND (T4.""name"" = '45%2021') 
  AND (T4.""status"" = 'PAYMENT_DUE') 
  AND (datetime(date_trunc('month', T3.""date""),'Pacific/Auckland')  = '2020-03-01 00:00:00') 
  AND datetime(date_trunc('month', T3.""date""),'Pacific/Auckland') BETWEEN '2020-01-01 10:00:00' 
  AND '2020-06-30 12:00:00' 
ORDER BY 
  T4.""duration_type"" DESC 
LIMIT 
  1000","['invoices', 'daily_exr_calendars', 'invoice_discounts', 'coupons', 'subscriptions', 'customers']"
1299969,"with cte as (select '2024-08-11 23:00:00'::timestamp as t1
union all
select '2024-08-12 00:00:00'::timestamp
union all
select '2024-08-13 01:00:00'::timestamp)
select date(convert_timezone('Asia/Kolkata', t1)),cast(convert_timezone('Asia/Kolkata', t1) as date) from cte order by 1",[]
1363961,"-- RS1

with quarterly_subscription_histories as (SELECT cal_date,
          id,
          data_source_id,
          currency_code,
          mrr,
          status,
          cancel_reason,
          period_start,
          period_end,
          discount,
          customer_handle,
          subscription_handle,
          primary_product_handle,
          subscription_id,
          CASE
              WHEN prev_subscription_id IS NULL THEN CASE
                                                         WHEN mrr>0 THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                                         WHEN status = 'CANCELLED' THEN CASE
                                                                                            WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('CONTRACTION' as varchar)
                                                                                        END
                                                         WHEN mrr=0 THEN cast('NA' as varchar)
                                                     END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status IN ('ACTIVE',
                                                                   'TRIAL') THEN CASE
                                                                                     WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('NEW' as varchar)
                                                                                 END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                   ELSE cast('CONTRACTION' as varchar)
                                                                               END
                                              ELSE cast('NA' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'ACTIVE' THEN cast('EXPANSION' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CONTRACTION' as varchar)
                                                                                  END
                                                   ELSE cast('NA' as varchar)
                                               END
              ELSE CASE
                       WHEN prev_status=status THEN CASE
                                                        WHEN status = 'CANCELLED'
                                                             OR status = 'TRIAL'
                                                             OR prev_mrr = mrr THEN cast('NA' as varchar)
                                                        WHEN prev_mrr > mrr THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CONTRACTION' as varchar)
                                                                                 END
                                                        ELSE cast('EXPANSION' as varchar)
                                                    END
                       ELSE CASE
                                WHEN prev_mrr > mrr THEN CASE
                                                             WHEN history_rule = 1000 THEN cast('CONTRACTION_FOR_CURRENCY_CHANGE' as varchar)
                                                             ELSE cast('CONTRACTION' as varchar)
                                                         END
                                WHEN prev_mrr = mrr THEN cast('NA' as varchar)
                                ELSE CASE
                                         WHEN prev_status = 'CANCELLED'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN date_trunc('quarter',activated_at) = date_trunc('quarter',period_start) THEN CASE
WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
ELSE cast('NEW' as varchar)
END
ELSE cast('EXPANSION' as varchar)
                                                                         END
                                         WHEN prev_status = 'TRIAL'
                                              AND mrr>0
                                              AND status = 'ACTIVE' THEN CASE
                                                                             WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                             ELSE cast('NEW' as varchar)
                                                                         END
                                     END
                            END
                   END
          END AS mrr_status,
          CASE
              WHEN (prev_subscription_id IS NULL
                    AND status = 'ACTIVE')
                   OR (prev_status = 'TRIAL'
                       AND status = 'ACTIVE') THEN CASE
                                                       WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                       ELSE cast('NEW' as varchar)
                                                   END
              WHEN status = 'ACTIVE'
                   AND prev_status = 'CANCELLED' THEN CASE
                                                          WHEN date_trunc('quarter',activated_at) = date_trunc('quarter',period_start) THEN CASE
                                                                                                                                        WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                                                        ELSE cast('NEW' as varchar)
                                                                                                                                    END
                                                          ELSE cast('REACTIVE' as varchar)
                                                      END
              WHEN status = 'TRIAL'
                   AND prev_status = 'ACTIVE' THEN cast('ACTIVE_TO_TRIAL' as varchar)
              WHEN prev_status = status THEN CASE
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr = 0
                                                      AND mrr > 0 THEN cast('FREE_TO_PAID' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr > prev_mrr THEN cast('UPGRADE' as varchar)
                                                 WHEN status = 'ACTIVE'
                                                      AND prev_mrr > 0
                                                      AND mrr < prev_mrr THEN cast('DOWNGRADE' as varchar)
                                             END
              WHEN prev_status = 'FUTURE' THEN CASE
                                                   WHEN status = 'TRIAL' THEN CASE
                                                                                  WHEN history_rule = 900 THEN cast('NEW_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                  ELSE cast('NEW_TRIAL' as varchar)
                                                                              END
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_FUTURE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN CASE
                                                                                                         WHEN history_rule = 900 THEN cast('NEW_FOR_CURRENCY_CHANGE' as varchar)
                                                                                                         ELSE cast('NEW' as varchar)
                                                                                                     END
                                                                                   ELSE CASE
                                                                                            WHEN history_rule = 900 THEN cast('NEW_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                            ELSE cast('NEW_FREE' as varchar)
                                                                                        END
                                                                               END
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'FUTURE' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('NA' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('ACTIVE_TO_FUTURE' as varchar)
                                                                                   ELSE cast('FREE_TO_FUTURE' as varchar)
                                                                               END
                                              ELSE cast('FUTURE' as varchar)
                                          END
              WHEN prev_status = 'PAUSED' THEN CASE
                                                   WHEN status = 'FUTURE' THEN cast('PAUSE_TO_FUTURE' as varchar)
                                                   WHEN status = 'CANCELLED' THEN CASE
                                                                                      WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                      ELSE cast('CANCEL_FROM_PAUSE' as varchar)
                                                                                  END
                                                   WHEN status = 'ACTIVE' THEN CASE
                                                                                   WHEN mrr > 0 THEN cast('PAUSE_TO_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_TO_FREE' as varchar)
                                                                               END
                                                   WHEN status = 'TRIAL' THEN cast('PAUSE_TO_TRIAL' as varchar)
                                                   ELSE cast('NA' as varchar)
                                               END
              WHEN status = 'PAUSED' THEN CASE
                                              WHEN prev_status = 'FUTURE' THEN cast('PAUSE_FROM_FUTURE' as varchar)
                                              WHEN prev_status = 'CANCELLED' THEN cast('PAUSE_FROM_CANCEL' as varchar)
                                              WHEN prev_status = 'TRIAL' THEN cast('PAUSE_FROM_TRIAL' as varchar)
                                              WHEN prev_status = 'ACTIVE' THEN CASE
                                                                                   WHEN prev_mrr > 0 THEN cast('PAUSE_FROM_PAID' as varchar)
                                                                                   ELSE cast('PAUSE_FROM_FREE' as varchar)
                                                                               END
                                              ELSE cast('PAUSE_FROM_UNKNOWN' as varchar)
                                          END
              ELSE CASE
                       WHEN status = 'CANCELLED' THEN CASE
                                                          WHEN prev_status = 'TRIAL' THEN CASE
                                                                                              WHEN history_rule = 1000 THEN cast('CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE' as varchar)
                                                                                              ELSE cast('CANCEL_FROM_TRIAL' as varchar)
                                                                                          END
                                                          WHEN prev_mrr IS NULL THEN CASE
                                                                                         WHEN history_rule = 1000 THEN cast('CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE' as varchar)
                                                                                         ELSE cast('CANCEL_FROM_UNKNOWN' as varchar)
                                                                                     END
                                                          WHEN prev_mrr = 0 THEN CASE
                                                                                     WHEN history_rule = 1000 THEN cast('CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE' as varchar)
                                                                                     ELSE cast('CANCEL_FROM_FREE' as varchar)
                                                                                 END
                                                          ELSE CASE
                                                                   WHEN history_rule = 1000 THEN cast('CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE' as varchar)
                                                                   ELSE  cast('CANCEL_FROM_PAID' as varchar)
                                                               END
                                                      END
                   END
          END AS mrr_sub_status,
          CASE
              WHEN prev_mrr IS NOT NULL THEN abs(mrr-prev_mrr)
              ELSE mrr
          END AS mrr_diff ,
          CASE
              WHEN prev_mrr IS NULL
                   OR mrr IS NULL THEN 0
              WHEN mrr>prev_mrr THEN prev_mrr
              ELSE mrr
          END AS mrr_fluctuation,
          primary_product_id,
          primary_product_group,
          primary_product_mrr,
          line_item_qty ,
          prev_product_id,
          prev_product_group,
          prev_product_mrr ,
          'America/New_York' AS timezone ,
          CASE
              WHEN prev_mrr > 0 THEN (((mrr - prev_mrr) * 1.0) / prev_mrr) * 100
          END AS mrr_diff_rate,
          CASE
              WHEN prev_mrr IS NOT NULL THEN mrr-prev_mrr
              ELSE mrr
          END AS mrr_diff_signed
   FROM
     (SELECT subscriptions.handle AS subscription_handle,
             products.handle AS primary_product_handle,
             subscriptions.customer_handle AS customer_handle,
             subscription_histories.id AS id,
             subscription_histories.data_source_id AS data_source_id,
             subscription_histories.currency_code AS currency_code,
             subscription_histories.status AS status,
             subscription_histories.cancel_reason AS cancel_reason,
             (subscription_histories.period_start) AS period_start,
             (subscription_histories.period_end) AS period_end,
             subscription_histories.is_cmrr,
             subscription_histories.history_rule AS history_rule,
             subscription_histories.discount AS discount,
             subscription_histories.subscription_id AS subscription_id,
             daily_calendars.cal_date AS cal_date,
             subscription_histories.mrr + GREATEST(subscription_histories.discount,0) AS mrr,
             lag(subscription_histories.mrr + GREATEST(subscription_histories.discount,0)) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                                                                       ORDER BY daily_calendars.cal_date) AS prev_mrr,
             lag(subscription_histories.status) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                            ORDER BY daily_calendars.cal_date) AS prev_status,
             lag(subscription_histories.history_rule) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                  ORDER BY daily_calendars.cal_date) AS prev_history_rule,
             lag(subscription_histories.discount) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                              ORDER BY daily_calendars.cal_date) AS prev_discount,
             lag(subscription_histories.subscription_id) OVER(PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                                     ORDER BY daily_calendars.cal_date) AS prev_subscription_id,
             (subscriptions.activated_at) AS activated_at,
             products.handle AS primary_product_id,
             products.product_group AS primary_product_group,
             LAG(products.handle) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                               ORDER BY daily_calendars.cal_date) AS prev_product_id,
             LAG(products.product_group) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id
                                                      ORDER BY daily_calendars.cal_date) AS prev_product_group,
             subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0) AS primary_product_mrr,
             LAG(subscription_component_histories.mrr + GREATEST(subscription_component_histories.discount,0)) OVER (PARTITION BY subscription_histories.subscription_id,subscription_histories.data_source_id ORDER BY daily_calendars.cal_date) AS prev_product_mrr,
             subscription_component_histories.quantity AS line_item_qty
FROM ""subscription_histories""
INNER JOIN ""daily_calendars"" 
ON date_trunc('second',daily_calendars.cal_date) BETWEEN 
subscription_histories.period_start AND subscription_histories.period_end
AND date_trunc('quarter',cast('2020-01-02 00:00:00' as timestamp) )>date_trunc('quarter',daily_calendars.cal_date)
OR (DATE_TRUNC('quarter',(cast('2020-01-02 00:00:00' as timestamp)) )=DATE_TRUNC('quarter',daily_calendars.cal_date)
AND (cast('2020-06-02 00:00:00' as timestamp)) BETWEEN subscription_histories.period_start
AND 
subscription_histories.period_end)
INNER JOIN subscriptions ON subscriptions.id=subscription_histories.subscription_id
AND subscriptions.data_source_id=subscription_histories.data_source_id
INNER JOIN subscription_component_histories ON subscription_histories.id=subscription_component_histories.subscription_history_id
AND subscription_histories.data_source_id=subscription_component_histories.data_source_id
INNER JOIN products ON products.id=subscription_component_histories.product_id
AND products.product_type='PLAN'
AND products.data_source_id=subscription_component_histories.data_source_id
WHERE
subscription_histories.data_source_id IN (798, 751, 791)
AND subscriptions.data_source_id IN (798, 751, 791)
AND subscription_component_histories.data_source_id IN (798, 751, 791)
AND products.data_source_id IN(798, 751, 791))
)

SELECT datetime(DATE_TRUNC('quarter', T1.""activated_at""),'Asia/Kolkata')
         ""QUARTER AND YEAR OF ACTIVATED AT"",
        DATE_TRUNC('quarter',T2.cal_date) as ""QUARTER AND YEAR"",
        COUNT(
                CASE 
                    WHEN T2.status = 'ACTIVE' THEN T2.status
                END        
        ) ""ACTIVE SUBSCRIPTIONS""
FROM quarterly_subscription_histories T2
     inner join subscriptions T1
          ON T1.id = T2.subscription_id
              AND T1.data_source_id = T2.data_source_id
WHERE ( T2.data_source_id = 768 )
        AND (
            DATE_TRUNC('quarter',T2.cal_date) >=                 
                DATE_TRUNC('quarter',DATETIME(
                    DATETIME(T1.""activated_at"",'UTC'),'Asia/Kolkata')
                )
             )
        AND (
                        datetime(DATE_TRUNC('quarter', T1.""activated_at""),'Asia/Kolkata')
                        BETWEEN cast('2020-01-01 00:00:00' as timestamp) AND cast('2020-06-30 23:59:59' as timestamp)
            )
GROUP BY datetime(DATE_TRUNC('quarter', T1.""activated_at""),'Asia/Kolkata'),
                DATE_TRUNC('quarter',T2.cal_date)
ORDER BY datetime(DATE_TRUNC('quarter', T1.""activated_at""),'Asia/Kolkata') ASC,
                DATE_TRUNC('quarter',T2.cal_date) ASC","['subscription_component_histories', 'subscriptions', 'products', 'subscription_histories', 'daily_calendars']"
1300129,"select distinct (convert_timezone('America/Los_Angeles', created_at)), case when created_at >= '2023-03-12 00:00:00' then date((convert_timezone('America/Los_Angeles', created_at)))
         when created_at <='2023-03-13 00:00:00' then cast((convert_timezone('America/Los_Angeles', created_at))as date) else null end
        from customers where created_at >= '2023-03-12 00:00:00' and created_at <='2023-03-13 00:00:00' order by 1,2 limit 100",['customers']
1363960,"-- LRQ13,
select 
  T1.""currency_code"" ""MonthlySubscriptionHistory.Currency"", 
  T2.""allow_direct_debit"" ""Customers.Allow Direct Debit"", 
  T2.""auto_collection"" ""Customers.Auto Collection"", 
  T2.""billing_day_of_month"" ""Customers.Billing Day of Month"", 
  T2.""business_type"" ""Customers.Business Type"", 
  T2.""business_vertical"" ""Customers.Business Vertical"", 
  T2.""company"" ""Customers.Company"", 
  T2.""country"" ""Customers.Country"", 
  datetime(datetime(T2.""created_at"", 'UTC'), 'Asia/Singapore') ""Customers.Created At"", 
  T2.""handle"" ""Customers.ID"", 
  T2.""customer_type"" ""Customers.Customer Type"", 
  T2.""email"" ""Customers.Email"", 
  T2.""primary_payment_source_id"" ""Customers.Primary Payment Source ID"", 
  T2.""secondary_payment_source_id"" ""Customers.Secondary Payment Source ID"", 
  T2.""solution_partner"" ""Customers.Solution Partner"", 
  T2.""vat_number"" ""Customers.Vat No"", 
  T3.""billing_cycles"" ""Products.Product Billing Cycles"", 
  T3.""period_unit"" ""Products.Product Period Unit"", 
  T3.""price"" ""Products.Price"", 
  T3.""charge_model"" ""Products.Charge Model"", 
  T3.""product_type"" ""Products.Type"" 
FROM 
  (
    SELECT 
      * 
    FROM 
      (
        select 
          subscriptions.handle as subscription_handle, 
          subscriptions.customer_handle as customer_handle, 
          subscription_component_histories.id, 
          subscription_component_histories.data_source_id, 
          subscription_component_histories.currency_code, 
          subscription_component_histories.status, 
          datetime(datetime(subscription_component_histories.period_start, 'UTC'), 'Asia/Singapore') as period_start, 
          datetime(datetime(subscription_component_histories.period_end, 'UTC'), 'Asia/Singapore') as period_end, 
          subscription_component_histories.is_cmrr, 
          subscription_component_histories.discount, 
          subscription_component_histories.subscription_id, 
          monthly_calendars.cal_date as cal_date, 
          subscription_component_histories.mrr as mrr, 
          subscription_component_histories.quantity as line_item_qty, 
          products.handle as primary_product_id, 
          subscription_component_histories.mrr as primary_product_mrr, 
          products.product_group as primary_product_group 
        from 
          subscription_component_histories 
          inner join monthly_calendars on date_trunc(
            'seconds', monthly_calendars.cal_date
          ) between datetime(datetime(subscription_component_histories.period_start, 'UTC'), 'Asia/Singapore')
          and datetime(datetime(subscription_component_histories.period_end, 'UTC'), 'Asia/Singapore')
          and datetime(date_trunc('month', cast('2020-01-01 05:18:39' as timestamp)),  'Asia/Singapore')
          > date_trunc(
            'month', monthly_calendars.cal_date
          ) 
          or ( datetime(date_trunc('month', cast('2020-01-01 05:18:39' as timestamp)),  'Asia/Singapore')= 
              DATE_TRUNC('month', monthly_calendars.cal_date) 
            and datetime(cast('2020-01-18 05:18:39' as timestamp), 'Asia/Singapore') between 
            datetime(datetime(subscription_component_histories.period_start, 'UTC'), 'Asia/Singapore')
            and datetime(datetime(subscription_component_histories.period_end, 'UTC'), 'Asia/Singapore')
          ) 
          inner join subscriptions on subscriptions.id = subscription_component_histories.subscription_id 
          and subscriptions.data_source_id = subscription_component_histories.data_source_id 
          inner join products on products.id = subscription_component_histories.product_id 
          and products.data_source_id = subscription_component_histories.data_source_id 
          and products.product_type = 'PLAN' 
        where 
          subscription_component_histories.data_source_id in(770, 794) 
          AND subscriptions.data_source_id in(770, 794) 
          AND products.data_source_id in(770, 794) 
          AND monthly_calendars.cal_date BETWEEN '2020-01-01 00:00:00' 
          AND '2020-01-01 23:59:59'
      ) T1 
    WHERE 
      T1.cal_date BETWEEN '2020-01-01 00:00:00' 
      AND '2020-01-01 23:59:59'
  ) T1 
  INNER JOIN customers T2 ON T2.""handle"" = T1.""customer_handle"" 
  and T2.""data_source_id"" = T1.""data_source_id"" 
  INNER JOIN products T3 ON T3.""handle"" = T1.""primary_product_id"" 
  and T3.""data_source_id"" = T1.""data_source_id"" 
WHERE 
  (
    T1.data_source_id in(770, 794)
  ) 
LIMIT 
  1001","['subscription_component_histories', 'monthly_calendars', 'subscriptions', 'customers', 'products']"
1436026,select * from invoices,['invoices']
1363959,"-- LRQ10,
select 
  T3.""email"" ""Customers.Email"", 
  T3.""first_name"" ""Customers.First Name"", 
  T3.""last_name"" ""Customers.Last Name"", 
  T3.""company"" ""Customers.Company"", 
  datetime(datetime(T2.""date"", 'UTC'), 'America/New_York') ""Invoices.Date"", 
  datetime(datetime(T2.""due_date"", 'UTC'), 'America/New_York') ""Invoices.Due Date"", 
  T2.""total"" ""Invoices.Total"", 
  T2.""is_recurring_invoice"" ""Invoices.Is Recurring Invoice"", 
  T2.""amount_to_collect"" ""Invoices.Amount To Collect"", 
  T2.""status"" ""Invoices.Status"", 
  T1.""current_plan_handle"" ""Subscriptions.Current Plan"", 
  T4.""entity_description"" ""NewInvoiceLineItems.Description"", 
  T4.""amount"" ""NewInvoiceLineItems.Amount"", 
  T4.""quantity"" ""NewInvoiceLineItems.Quantity"", 
  T2.""handle"" ""Invoices.Handle"", 
  T2.""amount_paid"" ""Invoices.Amount Paid"", 
  T2.""amount_adjusted"" ""Invoices.Amount Adjusted"", 
  T2.""credits_applied"" ""Invoices.Credits Applied"", 
  datetime(datetime(T2.""voided_at"", 'UTC'), 'America/New_York') ""Invoices.Voided At"", 
  T2.""write_off_amount"" ""Invoices.Write Off Amount"", 
  datetime(datetime(T2.""paid_at"", 'UTC'), 'America/New_York') ""Invoices.Paid At"", 
  T4.""discount_amount"" ""NewInvoiceLineItems.Discount Amount"", 
  T2.""is_first_invoice"" ""Invoices.Is First Invoice"", 
  T3.""handle"" ""Customers.ID"", 
  T1.""mrr"" ""Subscriptions.Current MRR"", 
  datetime(datetime(T2.""date"", 'UTC'), 'America/New_York') ""NewInvoiceLineItems.Date To"", 
  datetime(datetime(T2.""due_date"", 'UTC'), 'America/New_York') ""NewInvoiceLineItems.Date From"" 
FROM 
  invoice_line_items T4 
  INNER JOIN invoices T2 ON cast(T2.""id"" as varchar) = cast(T4.""invoice_id"" as varchar)
  and T2.""data_source_id"" = T4.""data_source_id"" 
  LEFT JOIN subscriptions T1 ON T1.""id"" = T4.""subscription_id"" 
  and T1.""data_source_id"" = T4.""data_source_id"" 
  INNER JOIN customers T3 ON T3.""id"" = T4.""customer_id"" 
  and T3.""data_source_id"" = T4.""data_source_id"" 
WHERE 
  (T4.data_source_id = 790)","['invoices', 'invoice_line_items', 'subscriptions', 'customers']"
1363955,"-- QUERY_ALIAS,QUERY,MD5_HEX,ROW_COUNT
-- LRQ1,
select Date_trunc('month', T1.""cal_date"") ""MONTH AND YEAR"",
       Count (CASE
                WHEN T1.""mrr_sub_status"" = 'CANCEL_FROM_PAID' THEN
                T1.""mrr_sub_status""
              END)                        ""PAID CHURN""
FROM   (SELECT T1.*,
               CASE
                 WHEN prev_subscription_id IS NULL THEN
                   CASE
                     WHEN mrr > 0 THEN
                       CASE
                         WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                         ELSE 'NEW'
                       END
                     WHEN status = 'CANCELLED' THEN
                       CASE
                         WHEN history_rule = 1000 THEN
                         'CONTRACTION_FOR_CURRENCY_CHANGE'
                         ELSE 'CONTRACTION'
                       END
                     WHEN mrr = 0 THEN 'NA'
                   END
                 WHEN prev_status = 'FUTURE' THEN
                   CASE
                     WHEN status IN ( 'ACTIVE', 'TRIAL' ) THEN
                       CASE
                         WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                         ELSE 'NEW'
                       END
                     WHEN status = 'CANCELLED' THEN
                       CASE
                         WHEN history_rule = 1000 THEN
                         'CONTRACTION_FOR_CURRENCY_CHANGE'
                         ELSE 'CONTRACTION'
                       END
                     ELSE 'NA'
                   END
                 WHEN status = 'FUTURE' THEN
                   CASE
                     WHEN prev_status = 'FUTURE' THEN 'NA'
                     WHEN prev_status = 'ACTIVE' THEN
                       CASE
                         WHEN history_rule = 1000 THEN
                         'CONTRACTION_FOR_CURRENCY_CHANGE'
                         ELSE 'CONTRACTION'
                       END
                     ELSE 'FUTURE'
                   END
                 WHEN status = 'PAUSED' THEN
                   CASE
                     WHEN prev_status = 'ACTIVE' THEN
                       CASE
                         WHEN history_rule = 1000 THEN
                         'CONTRACTION_FOR_CURRENCY_CHANGE'
                         ELSE 'CONTRACTION'
                       END
                     ELSE 'NA'
                   END
                 WHEN prev_status = 'PAUSED' THEN
                   CASE
                     WHEN status = 'ACTIVE' THEN 'EXPANSION'
                     WHEN status = 'CANCELLED' THEN
                       CASE
                         WHEN history_rule = 1000 THEN
                         'CONTRACTION_FOR_CURRENCY_CHANGE'
                         ELSE 'CONTRACTION'
                       END
                     ELSE 'NA'
                   END
                 ELSE
                   CASE
                     WHEN prev_status = status THEN
                       CASE
                         WHEN status = 'CANCELLED'
                               OR status = 'TRIAL'
                               OR prev_mrr = mrr THEN 'NA'
                         WHEN prev_mrr > mrr THEN
                           CASE
                             WHEN history_rule = 1000 THEN
                             'CONTRACTION_FOR_CURRENCY_CHANGE'
                             ELSE 'CONTRACTION'
                           END
                         ELSE 'EXPANSION'
                       END
                     ELSE
                       CASE
                         WHEN prev_mrr > mrr THEN
                           CASE
                             WHEN history_rule = 1000 THEN
                             'CONTRACTION_FOR_CURRENCY_CHANGE'
                             ELSE 'CONTRACTION'
                           END
                         WHEN prev_mrr = mrr THEN 'NA'
                         ELSE
                           CASE
                             WHEN prev_status = 'CANCELLED'
                                  AND mrr > 0
                                  AND status = 'ACTIVE' THEN
                               CASE
                                 WHEN Date_trunc('month', activated_at) =
                                      Date_trunc('month', period_start)
                               THEN
                                   CASE
                                     WHEN history_rule = 900 THEN
                                     'NEW_FOR_CURRENCY_CHANGE'
                                     ELSE 'NEW'
                                   END
                                 ELSE 'EXPANSION'
                               END
                             WHEN prev_status = 'TRIAL'
                                  AND mrr > 0
                                  AND status = 'ACTIVE' THEN
                               CASE
                                 WHEN history_rule = 900 THEN
                                 'NEW_FOR_CURRENCY_CHANGE'
                                 ELSE 'NEW'
                               END
                           END
                       END
                   END
               END AS mrr_status,
               CASE
                 WHEN ( prev_subscription_id IS NULL
                        AND status = 'ACTIVE' )
                       OR ( prev_status = 'TRIAL'
                            AND status = 'ACTIVE' ) THEN
                   CASE
                     WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                     ELSE 'NEW'
                   END
                 WHEN status = 'ACTIVE'
                      AND prev_status = 'CANCELLED' THEN
                   CASE
                     WHEN Date_trunc('month', activated_at) =
                          Date_trunc('month', period_start)
                   THEN
                       CASE
                         WHEN history_rule = 900 THEN 'NEW_FOR_CURRENCY_CHANGE'
                         ELSE 'NEW'
                       END
                     ELSE 'REACTIVE'
                   END
                 WHEN status = 'TRIAL'
                      AND prev_status = 'ACTIVE' THEN 'ACTIVE_TO_TRIAL'
                 WHEN prev_status = status THEN
                   CASE
                     WHEN status = 'ACTIVE'
                          AND prev_mrr = 0
                          AND mrr > 0 THEN 'FREE_TO_PAID'
                     WHEN status = 'ACTIVE'
                          AND prev_mrr > 0
                          AND mrr > prev_mrr THEN 'UPGRADE'
                     WHEN status = 'ACTIVE'
                          AND prev_mrr > 0
                          AND mrr < prev_mrr THEN 'DOWNGRADE'
                   END
                 WHEN prev_status = 'FUTURE' THEN
                   CASE
                     WHEN status = 'TRIAL' THEN
                       CASE
                         WHEN history_rule = 900 THEN
                         'NEW_TRIAL_FOR_CURRENCY_CHANGE'
                         ELSE 'NEW_TRIAL'
                       END
                     WHEN status = 'CANCELLED' THEN
                       CASE
                         WHEN history_rule = 1000 THEN
                         'CANCEL_FROM_FUTURE_FOR_CURRENCY_CHANGE'
                         ELSE 'CANCEL_FROM_FUTURE'
                       END
                     WHEN status = 'ACTIVE' THEN
                       CASE
                         WHEN mrr > 0 THEN
                           CASE
                             WHEN history_rule = 900 THEN
                             'NEW_FOR_CURRENCY_CHANGE'
                             ELSE 'NEW'
                           END
                         ELSE
                           CASE
                             WHEN history_rule = 900 THEN
                             'NEW_FREE_FOR_CURRENCY_CHANGE'
                             ELSE 'NEW_FREE'
                           END
                       END
                     ELSE 'NA'
                   END
                 WHEN status = 'FUTURE' THEN
                   CASE
                     WHEN prev_status = 'FUTURE' THEN 'NA'
                     WHEN prev_status = 'ACTIVE' THEN
                       CASE
                         WHEN prev_mrr > 0 THEN 'ACTIVE_TO_FUTURE'
                         ELSE 'FREE_TO_FUTURE'
                       END
                     ELSE 'FUTURE'
                   END
                 WHEN prev_status = 'PAUSED' THEN
                   CASE
                     WHEN status = 'FUTURE' THEN 'PAUSE_TO_FUTURE'
                     WHEN status = 'CANCELLED' THEN
                       CASE
                         WHEN history_rule = 1000 THEN
                         'CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE'
                         ELSE 'CANCEL_FROM_PAUSE'
                       END
                     WHEN status = 'ACTIVE' THEN
                       CASE
                         WHEN mrr > 0 THEN 'PAUSE_TO_PAID'
                         ELSE 'PAUSE_TO_FREE'
                       END
                     WHEN status = 'TRIAL' THEN 'PAUSE_TO_TRIAL'
                     ELSE 'NA'
                   END
                 WHEN status = 'PAUSED' THEN
                   CASE
                     WHEN prev_status = 'FUTURE' THEN 'PAUSE_FROM_FUTURE'
                     WHEN prev_status = 'CANCELLED' THEN 'PAUSE_FROM_CANCEL'
                     WHEN prev_status = 'TRIAL' THEN 'PAUSE_FROM_TRIAL'
                     WHEN prev_status = 'ACTIVE' THEN
                       CASE
                         WHEN prev_mrr > 0 THEN 'PAUSE_FROM_PAID'
                         ELSE 'PAUSE_FROM_FREE'
                       END
                     ELSE 'PAUSE_FROM_UNKNOWN'
                   END
                 ELSE
                   CASE
                     WHEN status = 'CANCELLED' THEN
                       CASE
                         WHEN prev_status = 'TRIAL' THEN
                           CASE
                             WHEN history_rule = 1000 THEN
                             'CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE'
                             ELSE 'CANCEL_FROM_TRIAL'
                           END
                         WHEN prev_mrr IS NULL THEN
                           CASE
                             WHEN history_rule = 1000 THEN
                             'CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE'
                             ELSE 'CANCEL_FROM_UNKNOWN'
                           END
                         WHEN prev_mrr = 0 THEN
                           CASE
                             WHEN history_rule = 1000 THEN
                             'CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE'
                             ELSE 'CANCEL_FROM_FREE'
                           END
                         ELSE
                           CASE
                             WHEN history_rule = 1000 THEN
                             'CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE'
                             ELSE 'CANCEL_FROM_PAID'
                           END
                       END
                   END
               END AS mrr_sub_status,
               CASE
                 WHEN prev_mrr IS NOT NULL THEN Abs(mrr - prev_mrr)
                 ELSE mrr
               END AS mrr_diff,
               CASE
                 WHEN prev_mrr IS NOT NULL THEN mrr - prev_mrr
                 ELSE mrr
               END AS mrr_diff_signed,
               CASE
                 WHEN prev_mrr > 0 THEN ( ( ( mrr - prev_mrr ) * 1.0 ) /
                                          prev_mrr ) *
                                        100
               END AS mrr_diff_rate,
               CASE
                 WHEN prev_mrr IS NULL
                       OR mrr IS NULL THEN 0
                 WHEN mrr > prev_mrr THEN prev_mrr
                 ELSE mrr
               END AS mrr_fluctuation
        FROM   (SELECT subscriptions.handle
                               AS
                               subscription_handle,
                       subscriptions.customer_handle
                               AS customer_handle,
                       subscription_histories.id,
                       subscription_histories.data_source_id,
                       subscription_histories.currency_code,
                       subscription_histories.status,
                       subscription_histories.cancel_reason,
                       Datetime(Datetime(subscription_histories.period_start,
                                'UTC'),
                       'America/Los_Angeles')
                               AS period_start,
                       Datetime(Datetime(subscription_histories.period_end,
                                'UTC'),
                       'America/Los_Angeles')
                               AS period_end,
                       subscription_histories.is_cmrr,
                       subscription_histories.history_rule,
                       subscription_histories.discount,
                       subscription_histories.subscription_id,
                       monthly_calendars.cal_date
                               AS cal_date,
                       subscription_histories.mrr
                               AS mrr,
                       Lag(subscription_histories.mrr)
                         OVER(
                           partition BY subscription_histories.subscription_id,
                         subscription_histories.data_source_id
                           ORDER BY monthly_calendars.cal_date )
                               AS prev_mrr,
                       Lag(subscription_histories.status)
                         OVER(
                           partition BY subscription_histories.subscription_id,
                         subscription_histories.data_source_id
                           ORDER BY monthly_calendars.cal_date )
                               AS prev_status,
                       Lag(subscription_histories.history_rule)
                         OVER(
                           partition BY subscription_histories.subscription_id,
                         subscription_histories.data_source_id
                           ORDER BY monthly_calendars.cal_date )
                               AS prev_history_rule,
                       Lag(subscription_histories.discount)
                         OVER(
                           partition BY subscription_histories.subscription_id,
                         subscription_histories.data_source_id
                           ORDER BY monthly_calendars.cal_date )
                               AS prev_discount,
                       Lag(subscription_histories.subscription_id)
                         OVER(
                           partition BY subscription_histories.subscription_id,
                         subscription_histories.data_source_id
                           ORDER BY monthly_calendars.cal_date )
                               AS prev_subscription_id,
                       Datetime(Datetime(subscriptions.activated_at, 'UTC'),
                       'America/Los_Angeles') AS
                       activated_at
                FROM   subscription_histories
                       INNER JOIN monthly_calendars
                               ON Date_trunc('month', Cast('2020-04-13 11:19:55' AS
                         TIMESTAMP)) >
       Date_trunc('month', monthly_calendars.cal_date)
       OR ( Date_trunc('month', Cast('2020-04-10 11:19:55' AS
                           TIMESTAMP)) =
        Date_trunc('month', monthly_calendars.cal_date)
       AND Cast('2020-04-10 11:19:55' AS TIMESTAMP) BETWEEN
       Datetime(Datetime(subscription_histories.period_start,
       'UTC'),
       'America/Los_Angeles') AND Datetime(
       Datetime(
       subscription_histories.period_end, 'UTC'
       ),
       'America/Los_Angeles'
       ) )
       INNER JOIN subscriptions
       ON subscriptions.id = subscription_histories.subscription_id
       AND subscriptions.data_source_id =
       subscription_histories.data_source_id
       WHERE  subscription_histories.data_source_id = 790
       AND subscriptions.data_source_id = 790
       AND monthly_calendars.cal_date BETWEEN
       '2020-04-01 00:00:00' AND '2020-04-10 23:59:59') T1) T1
WHERE  ( T1.data_source_id = 790 )
       AND Date_trunc('month', T1.""cal_date"") BETWEEN
           '2020-04-01 00:00:00' AND '2020-04-30 23:59:59'
GROUP  BY Date_trunc('month', T1.""cal_date"")
ORDER  BY Date_trunc('month', T1.""cal_date"") ASC","['subscription_histories', 'subscriptions', 'monthly_calendars']"
1299971,"select date(convert_timezone('America/Los_Angeles', '2024-08-11 23:00:00')),cast(convert_timezone('America/Los_Angeles', '2024-08-11 23:00:00') as date)",[]
1439699,"select * from ""cb-test"".""chargebee_prod_v2_1gb"".""coupons"" limit 10",['chargebee_prod_v2_1gb.coupons']
1299982,"select distinct (convert_timezone('America/Los_Angeles', created_at)),date((convert_timezone('America/Los_Angeles', created_at))) from customers limit 10",['customers']
1299980,"select distinct (convert_timezone('America/Los_Angeles', created_at)) from customers limit 10",['customers']
1299986,"select distinct (convert_timezone('America/Los_Angeles', created_at)),date((convert_timezone('America/Los_Angeles', created_at))) from customers where created_at >= '2024-03-12 00:00:00' and created_at <='2024-03-13 00:00:00' limit 100",['customers']
1305423,"with daily_exr_calendars as
  (select t1.cal_date,
          t1.currency_code,
          (t2.exchange_rate / t1.exchange_rate) ""exchange_rate""
   from daily_exr_calendars t1
   inner join daily_exr_calendars t2 on t2.currency_code = 'USD'
   and cast(cast(t1.cal_date as timestamp) as date) = cast(cast(t2.cal_date as timestamp) as date)
   where T1.cal_date between '2022-09-01 00:00:00' and '2023-10-31 23:59:59'
   order by t1.cal_date)
select date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) ""MONTH AND YEAR OF INVOICE DATE - INSTA"",
       SUM((floor((T2.""total"")) * floor(daily_exr_calendars.exchange_rate))) ""TOTAL BILLING""
from invoices_part T2
inner join daily_exr_calendars on DATE_TRUNC('day', datetime(datetime(daily_exr_calendars.""cal_date"", 'UTC'), 'America/Los_Angeles')) = DATE_TRUNC('day', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles'))
and daily_exr_calendars.""currency_code"" = T2.""currency_code""
where (T2.data_source_id = 751)
  and (date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) <> date_trunc('month', cast('2023-11-06 22:47:23' as timestamp)))
  and (T2.""status"" in('NOT_PAID',
                      'PAID',
                      'PAYMENT_DUE',
                      'POSTED'))
  and (T2.""currency_code"" is not null)
  and T2.""date"" between '2022-09-01 07:00:00' and '2023-11-01 06:59:59'
  and T2.""date"" >= '2018-12-01 00:00:00'
group by 1
order by 1 asc",['invoices_part']
1299985,"select distinct (convert_timezone('America/Los_Angeles', created_at)),date((convert_timezone('America/Los_Angeles', created_at))) from customers where created_at > '2024-03-12 00:00:00' and created_at <'2024-03-13 00:00:00' limit 100",['customers']
1300127,"select distinct created_at, case when created_at >= '2023-03-12 00:00:00' then date((convert_timezone('America/Los_Angeles', created_at)))
         when created_at <='2023-03-13 00:00:00' then cast((convert_timezone('America/Los_Angeles', created_at))as date) else null end
        from customers where created_at >= '2023-03-12 00:00:00' and created_at <='2023-03-13 00:00:00' order by 1,2 limit 100",['customers']
1299983,"select distinct (convert_timezone('America/Los_Angeles', created_at)),date((convert_timezone('America/Los_Angeles', created_at))) from customers where date(created_at) between '2024-03-12' and '2024-03-13' limit 100",['customers']
1299239,"-- RS43
WITH monthly_subscription_histories
     AS (SELECT subscription_histories.id,
                subscription_histories.data_source_id,
                subscription_histories.currency_code,
                subscription_histories.status,
                subscription_histories.cancel_reason,
                subscription_histories.period_start,
                subscription_histories.period_end,
                subscription_histories.is_cmrr,
                subscription_histories.history_rule,
                subscription_histories.discount,
                subscription_histories.subscription_id,
                monthly_calendars.cal_date AS cal_date,
                subscription_histories.mrr
         FROM   (SELECT subscription_histories.id,
                        subscription_histories.data_source_id,
                        subscription_histories.currency_code,
                        subscription_histories.status,
                        subscription_histories.cancel_reason,
                        subscription_histories.period_start AS period_start,
                        subscription_histories.period_end AS period_end,
                        subscription_histories.is_cmrr,
                        subscription_histories.history_rule,
                        subscription_histories.discount,
                        subscription_histories.subscription_id,
                        subscription_histories.mrr       AS mrr
                 FROM   subscription_histories
                 WHERE  subscription_histories.data_source_id = 794
                        AND ( subscription_histories.period_end >=
                              cast('2020-06-01 11:00:00' as timestamp)
                              AND subscription_histories.period_start <=
                                  cast('2020-01-01 10:59:59' as timestamp)
                              AND subscription_histories.currency_code IS NOT
                                  NULL ))
                AS
                subscription_histories
                inner join monthly_calendars
                        ON Date_trunc('second', monthly_calendars.cal_date)
                           BETWEEN
                           period_start AND period_end
         WHERE  subscription_histories.data_source_id = 794
                AND monthly_calendars.cal_date BETWEEN
                    cast('2020-01-01 10:59:59' as timestamp) AND cast('2020-01-03 11:00:00' as timestamp))

SELECT Date_trunc('month', monthly_subscription_histories.""cal_date"")
                                                 ""MONTH AND YEAR - INSTA"",
       SUM(monthly_subscription_histories.""mrr"") ""CMRR""
FROM   monthly_subscription_histories
       inner join subscriptions T1
               ON T1.""id"" = monthly_subscription_histories.""subscription_id""
                  AND T1.""data_source_id"" =
                      monthly_subscription_histories.""data_source_id""
WHERE  ( monthly_subscription_histories.data_source_id = 794 )
       AND ( T1.""currency_code"" IS NOT NULL )
       AND Date_trunc('day', monthly_subscription_histories.""cal_date"")
           BETWEEN
           cast('2020-01-01 10:59:59' as timestamp) AND cast('2020-03-01 11:00:00' as timestamp)
GROUP  BY Date_trunc('month', monthly_subscription_histories.""cal_date"")
ORDER  BY Date_trunc('month', monthly_subscription_histories.""cal_date"") ASC","['subscriptions', 'monthly_calendars', 'subscription_histories']"
1373119,"with monthly_subscription_histories_part as
  (select T1.*,
          case
              when prev_status = 'PAUSED' then case
                                                   when status = 'CANCELLED' then case
                                                                                      when history_rule = 1000 then 'CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE'
                                                                                      else 'CANCEL_FROM_PAUSE'
                                                                                  end
                                               end
              else case
                       when status = 'CANCELLED'
                            and prev_status != 'CANCELLED' then case
                                                                    when prev_status = 'TRIAL' then case
                                                                                                        when history_rule = 1000 then 'CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE'
                                                                                                        else 'CANCEL_FROM_TRIAL'
                                                                                                    end
                                                                    when prev_mrr is null then case
                                                                                                   when history_rule = 1000 then 'CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE'
                                                                                                   else 'CANCEL_FROM_UNKNOWN'
                                                                                               end
                                                                    when prev_mrr = 0 then case
                                                                                               when history_rule = 1000 then 'CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE'
                                                                                               else 'CANCEL_FROM_FREE'
                                                                                           end
                                                                    else case
                                                                             when history_rule = 1000 then 'CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE'
                                                                             else 'CANCEL_FROM_PAID'
                                                                         end
                                                                end
                   end
          end as mrr_sub_status,
          case
              when prev_mrr is not null then abs(mrr - prev_mrr)
              else mrr
          end as mrr_diff
   from
     (select histories.data_source_id,
             histories.business_entity_id,
             histories.subscription_id,
             histories.currency_code,
             histories.status,
             histories.period_start,
             histories.period_end,
             histories.history_rule,
             calendars.cal_date as cal_date,
             calendars.exchange_rate,
             histories.mrr as mrr,
             lag(histories.mrr) over (partition by histories.subscription_id,
                                                   histories.data_source_id
                                      order by calendars.cal_date,
                                               histories.business_entity_id,
                                               histories.subscription_id,
                                               histories.status,
                                               histories.history_rule) as prev_mrr,
                                     lag(histories.status) over (partition by histories.subscription_id,
                                                                              histories.data_source_id
                                                                 order by calendars.cal_date,
                                                                          histories.business_entity_id,
                                                                          histories.subscription_id,
                                                                          histories.status,
                                                                          histories.history_rule) as prev_status,
                                                                lag(histories.subscription_id) over (partition by histories.subscription_id,
                                                                                                                  histories.data_source_id
                                                                                                     order by calendars.cal_date,
                                                                                                              histories.business_entity_id,
                                                                                                              histories.subscription_id,
                                                                                                              histories.status,
                                                                                                              histories.history_rule) as prev_subscription_id,
                                                                                                    histories.cancel_reason
      from (
              (select subscription_histories_part.data_source_id,
                      subscription_histories_part.business_entity_id,
                      subscription_histories_part.subscription_id,
                      subscription_histories_part.currency_code,
                      subscription_histories_part.status,
                      subscription_histories_part.history_rule,
                      period_start,
                      period_end,
                      subscription_histories_part.mrr + GREATEST(subscription_histories_part.non_recurring_mrr, 0) as mrr,
                      case
                          when (datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) < '2022-12-01 00:00:00' then '2022-12-30 23:59:59'
                          else (date_trunc('month', datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) + interval '1' month)
                      end as cal_date,
                      subscription_histories_part.cancel_reason
               from subscription_histories_part
               where subscription_histories_part.is_cmrr = false
                 and subscription_histories_part.data_source_id = 750
                 and subscription_histories_part.period_end >= '2022-11-01 07:59:59'
                 and subscription_histories_part.period_start <= '2023-04-07 07:07:55'
                 and (date_trunc('month', ((datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')))) <> (date_trunc('month', (datetime(datetime(subscription_histories_part.period_start, 'UTC'), 'America/Los_Angeles')) + interval '1' second))
                      or (datetime(datetime(cast('2022-11-06 23:07:55' as timestamp), 'UTC'), 'America/Los_Angeles')) between subscription_histories_part.period_start and subscription_histories_part.period_end)
                 and subscription_histories_part.currency_code is not null )) histories
      inner join (
                    (select case
                                when date_trunc('month', cal_date) = date_trunc('month', '2022-11-06 23:07:55') then date_trunc('month', '2022-11-06 23:07:55') + interval '1' month
                                else cal_date
                            end as cal_date,
                            date_trunc('month', cal_date) cal_date_1,
                            1.0 as exchange_rate
                     from monthly_calendars
                     where cal_date between '2022-11-01 00:00:00' and '2023-04-30 23:59:59' )) calendars on cast(cast(histories.cal_date as timestamp) as date) = cast(cast(calendars.cal_date as timestamp) as date)) T1),
     monthly_exr_calendars as
  (select t1.cal_date,
          t1.currency_code,
          (t2.exchange_rate / t1.exchange_rate) ""exchange_rate""
   from monthly_exr_calendars t1
   inner join monthly_exr_calendars t2 on t2.currency_code = 'USD'
   and t1.cal_date = t2.cal_date
   where T1.cal_date between '2022-12-01 00:00:00' and '2023-04-30 23:59:59'
   order by t1.cal_date)
select date_trunc('month', monthly_subscription_histories_part.""cal_date"") ""MONTH AND YEAR"",
       sum (case
                when monthly_subscription_histories_part.""mrr_sub_status"" in('CANCEL_FROM_PAID',
                                                                             'CANCEL_FROM_PAUSE') then ((monthly_subscription_histories_part.""mrr_diff"") * monthly_exr_calendars.exchange_rate)
            end) ""CANCEL FROM PAID""
from monthly_subscription_histories_part
inner join monthly_exr_calendars on /* monthly_exr_calendars.""cal_date"" = monthly_subscription_histories_part.""cal_date""
   and */ monthly_exr_calendars.""currency_code"" = monthly_subscription_histories_part.""currency_code""
where (monthly_subscription_histories_part.data_source_id = 750)
  and (monthly_subscription_histories_part.""currency_code"" is not null)
  and (monthly_subscription_histories_part.""mrr_sub_status"" in('CANCEL_FROM_PAID',
                                                               'CANCEL_FROM_PAUSE'))
  and (case
           when monthly_subscription_histories_part.""status"" = 'CANCELLED' then case
                                                                                    when monthly_subscription_histories_part.""cancel_reason"" in('line-bPt40',
                                                                                                                                                'line-HKr71',
                                                                                                                                                'line-LRh52',
                                                                                                                                                'line-nbl28',
                                                                                                                                                'line-SeR94') then 'Involuntary'
                                                                                    else 'Voluntary'
                                                                                end
           else null
       end = 'Involuntary')
  and date_trunc('month', monthly_subscription_histories_part.""cal_date"") between '2022-11-01 00:00:00' and '2023-04-30 23:59:59'
  and date_trunc('month', monthly_subscription_histories_part.""cal_date"") >= '2018-12-01 00:00:00'
group by 1
order by 1 asc","['subscription_histories_part', 'monthly_calendars']"
1299242,"-- RS46,
select Sum(T1.""total"")    ""TOTAL BILLING"",
       Count(T1.""handle"") ""Number of Invoices""
FROM   invoices T1
WHERE  ( T1.data_source_id = 794 )
       AND ( T1.""status"" IN( 'NOT_PAID', 'PAYMENT_DUE' ) )
       AND ( T1.""currency_code"" IS NOT NULL )",['invoices']
1299987,"select distinct (convert_timezone('America/Los_Angeles', created_at)),date((convert_timezone('America/Los_Angeles', created_at))) from customers where created_at >= '2023-03-12 00:00:00' and created_at <='2023-03-13 00:00:00' limit 100",['customers']
1439528,"select * from ""cb-test"".""chargebee_prod_v2_1gb"".""coupons"" limit 10",['chargebee_prod_v2_1gb.coupons']
1305413,"with daily_exr_calendars as
  (select t1.cal_date,
          t1.currency_code,
          (t2.exchange_rate / t1.exchange_rate) ""exchange_rate""
   from daily_exr_calendars t1
   inner join daily_exr_calendars t2 on t2.currency_code = 'USD'
   and cast(cast(t1.cal_date as timestamp) as date) = cast(cast(t2.cal_date as timestamp) as date)
   where T1.cal_date between '2022-01-01 00:00:00' and '2022-12-31 23:59:59'
   order by t1.cal_date)
select date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) ""MONTH AND YEAR OF INVOICE DATE - INSTA"",
       SUM((floor((T2.""total"")) * floor(daily_exr_calendars.exchange_rate))) ""TOTAL BILLING""
from invoices_part T2
inner join daily_exr_calendars on DATE_TRUNC('day', datetime(datetime(daily_exr_calendars.""cal_date"", 'UTC'), 'America/Los_Angeles')) = DATE_TRUNC('day', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles'))
and daily_exr_calendars.""currency_code"" = T2.""currency_code""
where (T2.data_source_id = 750)
  and (date_trunc('month', datetime(datetime(T2.""date"", 'UTC'), 'America/Los_Angeles')) <> date_trunc('month', cast('2023-11-06 22:47:47' as timestamp)))
  and (T2.""status"" in('NOT_PAID',
                      'PAID',
                      'PAYMENT_DUE',
                      'POSTED'))
  and (T2.""is_first_invoice"" = 'True')
  and (T2.""currency_code"" is not null)
  and T2.""date"" between '2022-01-01 07:00:00' and '2022-11-01 06:59:59'
  and T2.""date"" >= '2018-12-01 00:00:00'
group by 1
order by 1 asc",['invoices_part']
1299984,"select distinct (convert_timezone('America/Los_Angeles', created_at)),date((convert_timezone('America/Los_Angeles', created_at))) from customers where created_at between '2024-03-12 00:00:00' and '2024-03-13 00:00:00' limit 100",['customers']
1300686,"select * from ""cb-test"".""chargebee_prod_v2_1gb"".""daily_exr_calendars"" limit 10",['chargebee_prod_v2_1gb.daily_exr_calendars']
1299238,"-- RS42
WITH monthly_subscription_histories AS (
  SELECT
    t1.*,
    CASE
      WHEN prev_status = 'PAUSED' THEN CASE
        WHEN STATUS = 'CANCELLED' THEN CASE
          WHEN history_rule = 1000 THEN CAST('CANCEL_FROM_PAUSE_FOR_CURRENCY_CHANGE' AS VARCHAR)
          ELSE CAST('CANCEL_FROM_PAUSE' AS VARCHAR)
        END
      END
      ELSE CASE
        WHEN STATUS = 'CANCELLED'
        AND prev_status <> 'CANCELLED' THEN CASE
          WHEN prev_status = 'TRIAL' THEN CASE
            WHEN history_rule = 1000 THEN CAST('CANCEL_FROM_TRIAL_FOR_CURRENCY_CHANGE' AS VARCHAR)
            ELSE cast('CANCEL_FROM_TRIAL' AS VARCHAR)
          END
          WHEN prev_mrr IS NULL THEN CASE
            WHEN history_rule = 1000 THEN CAST('CANCEL_FROM_UNKNOWN_FOR_CURRENCY_CHANGE' AS VARCHAR)
            ELSE CAST('CANCEL_FROM_UNKNOWN' AS VARCHAR)
          END
          WHEN prev_mrr = 0 THEN CASE
            WHEN history_rule = 1000 THEN CAST('CANCEL_FROM_FREE_FOR_CURRENCY_CHANGE' AS VARCHAR)
            ELSE CAST('CANCEL_FROM_FREE' AS VARCHAR)
          END
          ELSE CASE
            WHEN history_rule = 1000 THEN CAST('CANCEL_FROM_PAID_FOR_CURRENCY_CHANGE' AS VARCHAR)
            ELSE CAST('CANCEL_FROM_PAID' AS VARCHAR)
          END
        END
      END
    END AS mrr_sub_status
  FROM
    (
      SELECT
        histories.data_source_id,
        histories.subscription_id,
        histories.currency_code,
        histories.status,
        histories.period_start,
        histories.period_end,
        histories.history_rule,
        calendars.cal_date AS cal_date,
        calendars.exchange_rate,
        histories.mrr AS mrr,
        Lag(histories.mrr) OVER (
          PARTITION BY histories.subscription_id,
          histories.data_source_id
          ORDER BY
            calendars.cal_date, histories.mrr, histories.period_start
        ) AS prev_mrr,
        Lag(histories.status) OVER (
          PARTITION BY histories.subscription_id,
          histories.data_source_id
          ORDER BY
            calendars.cal_date, histories.status, histories.period_start
        ) AS prev_status,
        Lag(histories.subscription_id) OVER (
          PARTITION BY histories.subscription_id,
          histories.data_source_id
          ORDER BY
            calendars.cal_date, histories.subscription_id, histories.period_start
        ) AS prev_subscription_id
      FROM
        (
          (
            SELECT
              subscription_histories.data_source_id,
              subscription_histories.subscription_id,
              subscription_histories.currency_code,
              subscription_histories.status,
              subscription_histories.history_rule,
              period_start,
              period_end,
              subscription_histories.mrr AS mrr
            FROM
              subscription_histories
            WHERE
              subscription_histories.data_source_id = 794
              AND subscription_histories.period_end >= '2020-01-01 11:00:00'
              AND subscription_histories.period_start <= '2020-02-01 11:00:00'
              AND (
                subscription_histories.period_start BETWEEN '2020-01-01 11:00:00'
                AND '2020-02-01 04:32:58'
                OR subscription_histories.period_end BETWEEN '2020-02-01 11:00:00'
                AND '2020-02-02 04:32:58'
              )
              AND subscription_histories.currency_code IS NOT NULL
          )
        ) histories
        INNER JOIN (
          (
            SELECT
              CASE
                WHEN date_trunc('month', cal_date) = date_trunc(
                  'month',
                  cast('2020-04-02 23:29:15' AS timestamp)
                ) THEN date_trunc(
                  'month',
                  cast('2020-04-02 23:29:15' AS timestamp)
                ) + INTERVAL 1 month
                ELSE cal_date
              END cal_date,
              date_trunc('month', cal_date) cal_date_1,
              1.0 AS exchange_rate
            FROM
              monthly_calendars
            WHERE
              cal_date BETWEEN '2020-01-01 00:00:00' 
              AND '2020-01-02 00:00:00'
          )
        ) calendars ON cal_date BETWEEN '2020-01-01 00:00:00'
        AND '2020-01-01 23:00:00'
    ) t1 
)
SELECT
  date_trunc(
    'month',
    monthly_subscription_histories.""cal_date""
  ) ""MONTH AND YEAR"",
  COUNT (
    CASE
      WHEN monthly_subscription_histories.""mrr_sub_status"" = 'CANCEL_FROM_PAID'
      OR monthly_subscription_histories.""mrr_sub_status"" = 'CANCEL_FROM_FREE'
      OR monthly_subscription_histories.""mrr_sub_status"" = 'CANCEL_FROM_PAUSE'
      OR monthly_subscription_histories.""mrr_sub_status"" = 'CANCEL_FROM_UNKOWN' THEN t1.""handle""
    END
  ) ""CHURN""
FROM
  monthly_subscription_histories
  INNER JOIN subscriptions t1 ON t1.""id"" = monthly_subscription_histories.""subscription_id""
  AND t1.""data_source_id"" = monthly_subscription_histories.""data_source_id""
WHERE
  (
    monthly_subscription_histories.data_source_id = 794
  )
  AND (
    date_trunc(
      'month',
      monthly_subscription_histories.""cal_date""
    ) <> date_trunc('month', cast('2020-02-01 02:56:05' AS timestamp))
    AND datetime(
      t1.""activated_at"",
      'Pacific/Samoa'
    ) IS NOT NULL
  )
  AND (t1.""currency_code"" IS NOT NULL)
  AND date_trunc(
    'month',
    monthly_subscription_histories.""cal_date""
  ) BETWEEN '2020-01-01 00:00:00'
  AND '2020-03-01 23:00:00'
GROUP BY
  date_trunc(
    'month',
    monthly_subscription_histories.""cal_date""
  )
ORDER BY
  date_trunc(
    'month',
    monthly_subscription_histories.""cal_date""
  ) ASC","['subscriptions', 'monthly_calendars', 'subscription_histories']"
